/* The following code was generated by JFlex 1.6.1 */

package compilacion;
import java_cup.runtime.Symbol;
import java.util.ArrayList;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexicoCHTML.jflex</tt>
 */
public class ScannerCHTML implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMENTARIO = 4;
  public static final int ETIQUETA = 6;
  public static final int VALOR_ELEMENTO = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\43\2\0\1\43\4\0\1\43\1\44\1\5\1\6\1\7\1\5"+
    "\16\0\1\43\3\0\1\1\1\0\1\41\4\0\1\46\5\0\1\4"+
    "\1\0\1\3\1\47\1\52\1\55\1\53\1\54\3\0\1\50\1\51"+
    "\1\0\1\42\1\2\1\0\1\10\2\0\1\22\1\23\1\11\1\25"+
    "\1\21\1\16\1\35\1\12\1\17\1\27\1\37\1\15\1\14\1\20"+
    "\1\26\1\33\1\0\1\32\1\30\1\13\1\31\1\40\1\0\1\34"+
    "\1\0\1\24\1\0\1\45\2\0\1\36\1\0\1\22\1\23\1\11"+
    "\1\25\1\21\1\16\1\35\1\12\1\17\1\27\1\37\1\15\1\14"+
    "\1\20\1\26\1\33\1\0\1\32\1\30\1\13\1\31\1\40\1\0"+
    "\1\34\1\0\1\24\12\0\1\6\252\0\2\17\115\0\1\30\u1ea8\0"+
    "\1\6\1\6\u0100\0\1\37\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\5\1\0\2\2"+
    "\1\3\1\6\15\1\1\7\1\10\1\11\1\0\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\4\12"+
    "\3\0\1\22\2\0\1\23\10\0\1\24\21\0\1\25"+
    "\25\0\1\26\1\27\1\30\2\0\1\31\12\0\1\32"+
    "\6\0\1\33\3\0\1\34\1\35\3\0\1\36\1\37"+
    "\1\40\11\0\1\41\4\0\1\42\1\43\3\0\1\44"+
    "\1\45\1\46\1\0\1\47\1\50\3\0\1\51\1\0"+
    "\1\52\14\0\1\53\1\0\1\54\1\0\1\55\3\0"+
    "\1\56\3\0\1\57\17\0\1\60\1\0\1\61\1\0"+
    "\1\62\15\0\1\63\2\0\1\64\3\0\1\65\1\66"+
    "\1\67\3\0\1\70\2\0\1\71\1\0\1\72\1\73"+
    "\1\0\1\74\1\75\1\0\1\76\1\0\1\77\1\100"+
    "\1\0\1\101\1\0\1\102\1\0\1\103\4\0\1\104"+
    "\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\346\0\u019e\0\346\0\u01cc\0\346\0\346\0\u01fa"+
    "\0\u0228\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a"+
    "\0\u0398\0\u03c6\0\u03f4\0\u0422\0\346\0\346\0\346\0\u0450"+
    "\0\346\0\346\0\346\0\346\0\346\0\346\0\346\0\346"+
    "\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592\0\346"+
    "\0\u05c0\0\u05ee\0\346\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4"+
    "\0\u0702\0\u0730\0\u075e\0\346\0\u078c\0\u07ba\0\u07e8\0\u0816"+
    "\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986"+
    "\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\346\0\u0a9a\0\u0ac8"+
    "\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38"+
    "\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8"+
    "\0\u0dd6\0\u0e04\0\u0e32\0\346\0\346\0\346\0\u0e60\0\u0e8e"+
    "\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe"+
    "\0\u102c\0\u105a\0\u1088\0\346\0\u10b6\0\u10e4\0\u1112\0\u1140"+
    "\0\u116e\0\u119c\0\346\0\u11ca\0\u11f8\0\u1226\0\346\0\346"+
    "\0\u1254\0\u1282\0\u12b0\0\u12de\0\346\0\346\0\u130c\0\u133a"+
    "\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c\0\346"+
    "\0\u14aa\0\u14d8\0\u1506\0\u1534\0\346\0\346\0\u1562\0\u1590"+
    "\0\u15be\0\346\0\346\0\346\0\u15ec\0\346\0\346\0\u161a"+
    "\0\u1648\0\u1676\0\346\0\u16a4\0\346\0\u16d2\0\u1700\0\u172e"+
    "\0\u175c\0\u178a\0\u17b8\0\u17e6\0\u1814\0\u1842\0\u1870\0\u189e"+
    "\0\u18cc\0\346\0\u18fa\0\346\0\u1928\0\346\0\u1956\0\u1984"+
    "\0\u19b2\0\346\0\u19e0\0\u1a0e\0\u1a3c\0\346\0\u1a6a\0\u1a98"+
    "\0\u1ac6\0\u1af4\0\u1b22\0\u1b50\0\u1b7e\0\u1bac\0\u1bda\0\u1c08"+
    "\0\u1c36\0\u1c64\0\u1c92\0\u1cc0\0\u1cee\0\346\0\u1d1c\0\346"+
    "\0\u1d4a\0\u1d78\0\u1da6\0\u1dd4\0\u1e02\0\u1e30\0\u1e5e\0\u1e8c"+
    "\0\u1eba\0\u1ee8\0\u1f16\0\u1f44\0\u1f72\0\u1fa0\0\u1fce\0\346"+
    "\0\u1ffc\0\u202a\0\346\0\u2058\0\u2086\0\u20b4\0\u20e2\0\346"+
    "\0\346\0\u2110\0\u213e\0\u216c\0\346\0\u219a\0\u21c8\0\346"+
    "\0\u21f6\0\346\0\346\0\u2224\0\346\0\346\0\u2252\0\346"+
    "\0\u2280\0\346\0\346\0\u22ae\0\346\0\u22dc\0\346\0\u230a"+
    "\0\346\0\u2338\0\u2366\0\u2394\0\u23c2\0\346\0\346";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\2\6\1\7\1\0\1\7\34\6"+
    "\1\7\11\6\5\11\1\0\33\11\1\12\1\11\2\0"+
    "\1\13\2\11\2\0\3\11\1\0\4\14\1\15\3\0"+
    "\46\14\1\6\1\7\1\16\2\6\1\7\1\0\1\7"+
    "\1\17\1\20\1\6\1\21\2\6\1\22\1\23\1\6"+
    "\1\24\1\25\1\26\2\6\1\27\1\6\1\30\1\6"+
    "\1\31\1\32\1\6\1\33\2\6\1\34\1\35\1\36"+
    "\1\6\1\7\11\6\5\11\1\0\33\11\1\37\1\11"+
    "\3\0\2\11\2\0\3\11\60\0\1\7\3\0\1\7"+
    "\1\0\1\7\34\0\1\7\14\0\1\40\52\0\5\11"+
    "\1\0\33\11\1\0\1\11\3\0\2\11\2\0\3\11"+
    "\1\0\5\41\3\0\3\41\1\42\4\41\1\43\2\41"+
    "\1\44\6\41\1\45\6\41\1\46\3\41\1\47\1\50"+
    "\1\51\1\41\1\52\1\53\1\54\2\41\3\0\1\55"+
    "\63\0\1\56\1\57\1\60\1\0\1\61\4\0\1\62"+
    "\1\63\3\0\1\64\1\0\1\65\43\0\1\66\1\0"+
    "\1\67\1\70\52\0\1\71\6\0\1\72\43\0\1\73"+
    "\10\0\1\74\50\0\1\75\52\0\1\76\2\0\1\77"+
    "\63\0\1\100\62\0\1\101\44\0\1\102\10\0\1\103"+
    "\53\0\1\104\46\0\1\105\65\0\1\106\45\0\1\107"+
    "\36\0\1\110\122\0\1\44\1\42\61\0\1\47\47\0"+
    "\1\43\57\0\1\50\2\0\1\46\4\0\1\111\102\0"+
    "\1\112\40\0\1\113\61\0\1\114\65\0\1\115\56\0"+
    "\1\116\46\0\1\117\47\0\1\120\76\0\1\121\44\0"+
    "\1\122\47\0\1\123\2\0\1\124\55\0\1\125\57\0"+
    "\1\126\44\0\1\127\3\0\1\130\53\0\1\131\3\0"+
    "\1\132\47\0\1\133\57\0\1\134\53\0\1\135\61\0"+
    "\1\136\57\0\1\137\51\0\1\140\62\0\1\141\66\0"+
    "\1\142\41\0\1\143\44\0\1\144\61\0\1\145\75\0"+
    "\1\146\41\0\1\147\52\0\1\150\66\0\1\151\65\0"+
    "\1\152\54\0\1\153\37\0\1\154\57\0\1\155\76\0"+
    "\1\156\23\0\1\157\76\0\1\160\65\0\1\161\42\0"+
    "\1\162\55\0\1\163\61\0\1\164\47\0\1\165\47\0"+
    "\1\166\71\0\1\167\46\0\1\170\51\0\1\171\62\0"+
    "\1\172\57\0\1\173\54\0\1\174\67\0\1\175\50\0"+
    "\1\176\44\0\1\177\77\0\1\200\54\0\1\201\52\0"+
    "\1\202\37\0\1\203\66\0\1\204\51\0\1\205\46\0"+
    "\1\206\53\0\1\207\1\0\1\210\2\0\1\211\1\212"+
    "\1\0\1\213\1\0\1\214\2\0\1\215\1\0\1\216"+
    "\2\0\1\217\50\0\1\220\50\0\1\221\57\0\1\222"+
    "\43\0\1\223\65\0\1\224\62\0\1\225\47\0\1\226"+
    "\63\0\1\227\55\0\1\230\47\0\1\231\52\0\1\232"+
    "\66\0\1\233\61\0\1\234\36\0\1\235\70\0\1\236"+
    "\55\0\1\237\65\0\1\240\30\0\1\241\1\242\1\243"+
    "\6\0\1\244\1\245\3\0\1\246\1\0\1\247\43\0"+
    "\1\250\1\0\1\251\1\252\52\0\1\253\52\0\1\254"+
    "\61\0\1\255\63\0\1\256\62\0\1\257\55\0\1\260"+
    "\44\0\1\261\53\0\1\262\56\0\1\263\55\0\1\264"+
    "\56\0\1\265\53\0\1\266\41\0\1\267\72\0\1\270"+
    "\55\0\1\271\56\0\1\272\63\0\1\273\40\0\1\274"+
    "\71\0\1\275\56\0\1\276\46\0\1\277\47\0\1\300"+
    "\76\0\1\301\44\0\1\302\47\0\1\303\62\0\1\304"+
    "\44\0\1\305\3\0\1\306\53\0\1\307\53\0\1\310"+
    "\63\0\1\311\56\0\1\312\61\0\1\313\56\0\1\314"+
    "\46\0\1\315\71\0\1\316\57\0\1\317\51\0\1\320"+
    "\41\0\1\321\63\0\1\322\65\0\1\323\54\0\1\324"+
    "\37\0\1\325\57\0\1\326\76\0\1\327\54\0\1\330"+
    "\42\0\1\331\55\0\1\332\61\0\1\333\46\0\1\334"+
    "\56\0\1\335\56\0\1\336\56\0\1\337\61\0\1\340"+
    "\46\0\1\341\51\0\1\342\57\0\1\343\76\0\1\344"+
    "\52\0\1\345\37\0\1\346\66\0\1\347\51\0\1\350"+
    "\46\0\1\351\63\0\1\352\57\0\1\353\43\0\1\354"+
    "\64\0\1\355\63\0\1\356\47\0\1\357\52\0\1\360"+
    "\65\0\1\361\50\0\1\362\63\0\1\363\42\0\1\364"+
    "\70\0\1\365\55\0\1\366\65\0\1\367\37\0\1\370"+
    "\56\0\1\371\55\0\1\372\54\0\1\373\56\0\1\374"+
    "\62\0\1\375\50\0\1\376\56\0\1\377\57\0\1\u0100"+
    "\63\0\1\u0101\57\0\1\u0102\43\0\1\u0103\46\0\1\u0104"+
    "\67\0\1\u0105\56\0\1\u0106\55\0\1\u0107\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9200];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\3\1\1\11\1\0\1\11\1\1\2\11"+
    "\15\1\3\11\1\0\10\11\4\1\3\0\1\11\2\0"+
    "\1\11\10\0\1\11\21\0\1\11\25\0\3\11\2\0"+
    "\1\1\12\0\1\11\6\0\1\11\3\0\2\11\3\0"+
    "\1\1\2\11\11\0\1\11\4\0\2\11\3\0\3\11"+
    "\1\0\2\11\3\0\1\11\1\0\1\11\14\0\1\11"+
    "\1\0\1\11\1\0\1\11\3\0\1\11\3\0\1\11"+
    "\17\0\1\11\1\0\1\11\1\0\1\1\15\0\1\11"+
    "\2\0\1\11\3\0\1\1\2\11\3\0\1\11\2\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\1\11\1\0"+
    "\2\11\1\0\1\11\1\0\1\11\1\0\1\11\4\0"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    ArrayList <ErrorCode> errores;
    String sourceFile;

    public ScannerCHTML(java.io.InputStream is, String archivoFuente, ArrayList <ErrorCode> errores){
        this(new java.io.InputStreamReader(is));      
        this.sourceFile = archivoFuente;
        this.errores = errores;
    }    

    public ArrayList <ErrorCode> getErrores(){
        return errores;
    }

    StringBuffer string = new StringBuffer();

    private Symbol simbolo(int type) {
        System.out.println(TokensCHTML.terminalNames[type] + " - " + (yyline+1)+ " - " + (yycolumn+1));
        return new Symbol(type, yyline, yycolumn);
    }
    private Symbol simbolo(int type, Object value) {
        System.out.println(TokensCHTML.terminalNames[type] + " - " + (yyline+1)+ " - " + (yycolumn+1) + " - " + value);
        return new Symbol(type, yyline, yycolumn, value);
    }

    private Symbol errorLexico(String cadena, String mensaje){
        System.out.println("Error léxico - " + (yyline+1) + " - " + (yycolumn+1) + " - " + cadena);
        errores.add(new ErrorCode(TipoError.lexico, yyline + 1, yycolumn +1, cadena, "Caracter no reconocido", this.sourceFile));
        //System.err.println(mensaje + ": \""+ cadena + "\" (" + (yyline + 1) + "," + (yycolumn +1) + ")");
        return new Symbol(TokensCHTML.errorLex, yyline, yycolumn, cadena);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScannerCHTML(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 242) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              return simbolo(TokensCHTML.EOF);
            }
            case 264: break;
            case STRING: {
              yybegin(YYINITIAL);
                        return errorLexico(" ", "Cadena no terminada antes del fin de línea");
            }
            case 265: break;
            default:
          { return new java_cup.runtime.Symbol(TokensCHTML.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return errorLexico(yytext(), "Caracter no reconocido");
            }
          case 70: break;
          case 2: 
            { 
            }
          case 71: break;
          case 3: 
            { yybegin(ETIQUETA); 
                        return simbolo(TokensCHTML.LT, yytext());
            }
          case 72: break;
          case 4: 
            { string.append( yytext() );
            }
          case 73: break;
          case 5: 
            { yybegin(YYINITIAL); 
            /*System.out.println("Cadena: " + string.toString());*/
            return simbolo(TokensCHTML.cadenaValor, string.toString());
            }
          case 74: break;
          case 6: 
            { yybegin(YYINITIAL);                         
            return simbolo(TokensCHTML.GT, yytext());
            }
          case 75: break;
          case 7: 
            { string.setLength(0); yybegin(VALOR_ELEMENTO);
            }
          case 76: break;
          case 8: 
            { return simbolo(TokensCHTML.ptoComa, yytext());
            }
          case 77: break;
          case 9: 
            { yybegin(ETIQUETA);             
            return simbolo(TokensCHTML.cadenaValor, string.toString());
            }
          case 78: break;
          case 10: 
            { /*throw new RuntimeException("Illegal escape sequence \""+yytext()+"\""); */  
                        yybegin(YYINITIAL);
                        return errorLexico(yytext(), "Secuencia de escape no valida");
            }
          case 79: break;
          case 11: 
            { string.append('\t');
            }
          case 80: break;
          case 12: 
            { string.append('\n');
            }
          case 81: break;
          case 13: 
            { string.append('\b');
            }
          case 82: break;
          case 14: 
            { string.append('\r');
            }
          case 83: break;
          case 15: 
            { string.append('\"');
            }
          case 84: break;
          case 16: 
            { string.append('\\');
            }
          case 85: break;
          case 17: 
            { string.append('\'');
            }
          case 86: break;
          case 18: 
            { return simbolo(TokensCHTML.celda, yytext());
            }
          case 87: break;
          case 19: 
            { return simbolo(TokensCHTML.celdaEnc, yytext());
            }
          case 88: break;
          case 20: 
            { return simbolo(TokensCHTML.id, yytext());
            }
          case 89: break;
          case 21: 
            { return simbolo(TokensCHTML.cjs, yytext());
            }
          case 90: break;
          case 22: 
            { yybegin(COMENTARIO);
            }
          case 91: break;
          case 23: 
            { yybegin(YYINITIAL);
            }
          case 92: break;
          case 24: 
            { return simbolo(TokensCHTML.ccss, yytext());
            }
          case 93: break;
          case 25: 
            { return simbolo(TokensCHTML.cajaOpciones, yytext());
            }
          case 94: break;
          case 26: 
            { return simbolo(TokensCHTML.alto, yytext());
            }
          case 95: break;
          case 27: 
            { return simbolo(TokensCHTML.ruta, yytext());
            }
          case 96: break;
          case 28: 
            { return simbolo(TokensCHTML.chtml, yytext());
            }
          case 97: break;
          case 29: 
            { return simbolo(TokensCHTML.click, yytext());
            }
          case 98: break;
          case 30: 
            { return simbolo(TokensCHTML.texto, yytext());
            }
          case 99: break;
          case 31: 
            { return simbolo(TokensCHTML.tabla, yytext());
            }
          case 100: break;
          case 32: 
            { return simbolo(TokensCHTML.fila, yytext());
            }
          case 101: break;
          case 33: 
            { return simbolo(TokensCHTML.fondo, yytext());
            }
          case 102: break;
          case 34: 
            { return simbolo(TokensCHTML.ancho, yytext());
            }
          case 103: break;
          case 35: 
            { return simbolo(TokensCHTML.boton, yytext());
            }
          case 104: break;
          case 36: 
            { return simbolo(TokensCHTML.panel, yytext());
            }
          case 105: break;
          case 37: 
            { return simbolo(TokensCHTML.grupo, yytext());
            }
          case 106: break;
          case 38: 
            { return simbolo(TokensCHTML.valor, yytext());
            }
          case 107: break;
          case 39: 
            { return simbolo(TokensCHTML.cuerpo, yytext());
            }
          case 108: break;
          case 40: 
            { return simbolo(TokensCHTML.titulo, yytext());
            }
          case 109: break;
          case 41: 
            { return simbolo(TokensCHTML.celdaF, yytext());
            }
          case 110: break;
          case 42: 
            { return simbolo(TokensCHTML.celdaEncF, yytext());
            }
          case 111: break;
          case 43: 
            { return simbolo(TokensCHTML.imagen, yytext());
            }
          case 112: break;
          case 44: 
            { return simbolo(TokensCHTML.enlace, yytext());
            }
          case 113: break;
          case 45: 
            { return simbolo(TokensCHTML.opcion, yytext());
            }
          case 114: break;
          case 46: 
            { return simbolo(TokensCHTML.areaTexto, yytext());
            }
          case 115: break;
          case 47: 
            { return simbolo(TokensCHTML.cjsF, yytext());
            }
          case 116: break;
          case 48: 
            { return simbolo(TokensCHTML.spinner, yytext());
            }
          case 117: break;
          case 49: 
            { return simbolo(TokensCHTML.ccssF, yytext());
            }
          case 118: break;
          case 50: 
            { return simbolo(TokensCHTML.cajaOpcionesF, yytext());
            }
          case 119: break;
          case 51: 
            { return simbolo(TokensCHTML.alineado, yytext());
            }
          case 120: break;
          case 52: 
            { return simbolo(TokensCHTML.chtmlF, yytext());
            }
          case 121: break;
          case 53: 
            { return simbolo(TokensCHTML.textoF, yytext());
            }
          case 122: break;
          case 54: 
            { return simbolo(TokensCHTML.tablaF, yytext());
            }
          case 123: break;
          case 55: 
            { return simbolo(TokensCHTML.filaF, yytext());
            }
          case 124: break;
          case 56: 
            { return simbolo(TokensCHTML.botonF, yytext());
            }
          case 125: break;
          case 57: 
            { return simbolo(TokensCHTML.panelF, yytext());
            }
          case 126: break;
          case 58: 
            { return simbolo(TokensCHTML.salto , yytext());
            }
          case 127: break;
          case 59: 
            { return simbolo(TokensCHTML.cajaTexto, yytext());
            }
          case 128: break;
          case 60: 
            { return simbolo(TokensCHTML.cuerpoF, yytext());
            }
          case 129: break;
          case 61: 
            { return simbolo(TokensCHTML.tituloF, yytext());
            }
          case 130: break;
          case 62: 
            { return simbolo(TokensCHTML.imagenF, yytext());
            }
          case 131: break;
          case 63: 
            { return simbolo(TokensCHTML.enlaceF, yytext());
            }
          case 132: break;
          case 64: 
            { return simbolo(TokensCHTML.opcionF, yytext());
            }
          case 133: break;
          case 65: 
            { return simbolo(TokensCHTML.encabezado, yytext());
            }
          case 134: break;
          case 66: 
            { return simbolo(TokensCHTML.areaTextoF, yytext());
            }
          case 135: break;
          case 67: 
            { return simbolo(TokensCHTML.spinnerF, yytext());
            }
          case 136: break;
          case 68: 
            { return simbolo(TokensCHTML.cajaTextoF, yytext());
            }
          case 137: break;
          case 69: 
            { return simbolo(TokensCHTML.encabezadoF, yytext());
            }
          case 138: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
