
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilacion;

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCHTML extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TokensCHTML.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCHTML() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCHTML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCHTML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\010\000\002\002\004\000\002\002\003\000\002\003" +
    "\012\000\002\004\006\000\002\004\003\000\002\005\006" +
    "\000\002\005\003\000\002\040\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\030\000\004\004\004\001\002\000\004\006\010\001" +
    "\002\000\004\002\007\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\004\005\011\001\002\000" +
    "\006\003\014\004\012\001\002\000\004\007\030\001\002" +
    "\000\006\003\ufffd\004\ufffd\001\002\000\004\005\027\001" +
    "\002\000\006\003\014\004\016\001\002\000\004\012\024" +
    "\001\002\000\004\004\ufffb\001\002\000\004\004\021\001" +
    "\002\000\004\033\022\001\002\000\004\005\023\001\002" +
    "\000\004\002\uffff\001\002\000\004\037\025\001\002\000" +
    "\004\005\026\001\002\000\004\004\ufffc\001\002\000\006" +
    "\003\ufffa\004\ufffa\001\002\000\004\034\031\001\002\000" +
    "\004\005\032\001\002\000\006\003\ufffe\004\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\030\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\014\040\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\017\040\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCHTML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCHTML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCHTML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public AST ast;
    //la lista global de errores del analizador
    public ArrayList <ErrorCode> errores;

    //nombre del archivo fuente
    public String sourceFile;


    public ParserCHTML(java_cup.runtime.Scanner s, String archivoFuente,  ArrayList <ErrorCode> errores){
        super(s);
        this.sourceFile = archivoFuente;
        this.errores = errores;
    }
    
    
    public AST getAST(){
        return ast;
    }
    

    public ArrayList <ErrorCode> getErrores(){
        return errores;
    }

    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){

        errores.add(new ErrorCode(TipoError.sintactico, s.left+1, s.right+1, String.valueOf(s.value), "Sintaxis erronea", sourceFile));
        //System.err.println("Error de sintaxis en (" + (s.left+1) + ","+(s.right+1)+ "): " +s.value);
    }
   
    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        /* 
            Posibles causas:
                1- se encontró un error y no hay una posible reducción posterior al lugar donde se halló

        */
       errores.add(new ErrorCode(TipoError.sintactico, s.left+1, s.right+1, String.valueOf(s.value), "Sintaxis erronea", sourceFile));
       //System.err.println("Error IRRECUPERABLE de sintaxis en (" + (s.left+1) + ", " +(s.right+1)+ "): " +s.value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCHTML$actions {




  private final ParserCHTML parser;

  /** Constructor */
  CUP$ParserCHTML$actions(ParserCHTML parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCHTML$do_action_part00000000(
    int                        CUP$ParserCHTML$act_num,
    java_cup.runtime.lr_parser CUP$ParserCHTML$parser,
    java.util.Stack            CUP$ParserCHTML$stack,
    int                        CUP$ParserCHTML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCHTML$result;

      /* select the action based on the action number */
      switch (CUP$ParserCHTML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).value;
		RESULT = start_val;
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCHTML$parser.done_parsing();
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= CHTML 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		NodoAST c = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		
    parser.ast = new AST();
    parser.ast.raiz = c;

              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CHTML ::= LT chtml GT ENCABEZADO CUERPO LT chtmlF GT 
            {
              NodoAST RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-6)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-6)).right;
		Object ch = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-4)).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-3)).right;
		NodoAST c = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-3)).value;
		int chfleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).left;
		int chfright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).right;
		Object chf = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).value;
		
    RESULT = new NodoAST(TipoNodo.chtml, "CHTML", chleft, chright, parser.sourceFile, e, c);

              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("CHTML",1, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ENCABEZADO ::= LT encabezado encabezadoF GT 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-2)).value;
		int efleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).left;
		int efright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).right;
		Object ef = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).value;
		
    RESULT = new NodoAST(TipoNodo.encabezado, "ENCABEZADO", eleft, eright, parser.sourceFile);

              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",2, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ENCABEZADO ::= ERROR 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		
    RESULT = e;

              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",2, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= LT cuerpo cuerpoF GT 
            {
              NodoAST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).value;
		
    RESULT = new NodoAST(TipoNodo.cuerpo, "CUERPO", cleft, cright, parser.sourceFile);

              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO ::= ERROR 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		
    RESULT = e;

              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ERROR ::= error GT 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).value;
		
    RESULT = new NodoAST(TipoNodo.errorSintactico, "ERRS", eleft, eright, parser.sourceFile);

              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("ERROR",30, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCHTML$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCHTML$do_action(
    int                        CUP$ParserCHTML$act_num,
    java_cup.runtime.lr_parser CUP$ParserCHTML$parser,
    java.util.Stack            CUP$ParserCHTML$stack,
    int                        CUP$ParserCHTML$top)
    throws java.lang.Exception
    {
              return CUP$ParserCHTML$do_action_part00000000(
                               CUP$ParserCHTML$act_num,
                               CUP$ParserCHTML$parser,
                               CUP$ParserCHTML$stack,
                               CUP$ParserCHTML$top);
    }
}

}
