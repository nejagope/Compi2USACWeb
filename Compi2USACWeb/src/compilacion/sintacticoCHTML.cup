package compilacion;
import java_cup.runtime.*;
import java.util.ArrayList;

parser code
{:
    public AST ast;
    //la lista global de errores del analizador
    public ArrayList <ErrorCode> errores;

    //nombre del archivo fuente
    public String sourceFile;


    public ParserCHTML(java_cup.runtime.Scanner s, String archivoFuente,  ArrayList <ErrorCode> errores){
        super(s);
        this.sourceFile = archivoFuente;
        this.errores = errores;
    }
    
    
    public AST getAST(){
        return ast;
    }
    

    public ArrayList <ErrorCode> getErrores(){
        return errores;
    }

    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){

        errores.add(new ErrorCode(TipoError.sintactico, s.left+1, s.right+1, String.valueOf(s.value), "Sintaxis erronea", sourceFile));
        //System.err.println("Error de sintaxis en (" + (s.left+1) + ","+(s.right+1)+ "): " +s.value);
    }
   
    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        /* 
            Posibles causas:
                1- se encontró un error y no hay una posible reducción posterior al lugar donde se halló

        */
       errores.add(new ErrorCode(TipoError.sintactico, s.left+1, s.right+1, String.valueOf(s.value), "Sintaxis erronea", sourceFile));
       //System.err.println("Error IRRECUPERABLE de sintaxis en (" + (s.left+1) + ", " +(s.right+1)+ "): " +s.value);
    }

    public void agregarError(String cadena, int linea, int columna, String mensaje){
        errores.add(new ErrorCode(TipoError.sintactico, linea, columna, cadena, mensaje, sourceFile));
    }
:}

action code
{:

:}

terminal LT, GT, EQ, ptoComa;
terminal chtml, encabezado, cjs, ccss, cuerpo, titulo, panel, texto, imagen, boton, enlace, tabla;
terminal fila, celdaEnc, celda, areaTexto, cajaTexto, cajaOpciones, opcion, spinner, salto;
terminal chtmlF, encabezadoF, cjsF, ccssF, cuerpoF, tituloF, panelF, textoF, imagenF, botonF, enlaceF, tablaF;
terminal filaF, celdaEncF, celdaF, areaTextoF, cajaTextoF, cajaOpcionesF, opcionF, spinnerF;

terminal String ruta, fondo, click, id, grupo, alto, ancho, alineado, valor;

terminal cadenaValor;

terminal String elementoDesconocido, textoPlano;
terminal errorLex;

non terminal S;
non terminal NodoAST CHTML, ATRIB, NODO_CHTML, ATRIBS, TAG_INI, TAG_FIN, TAG_NAME, TAG_FIN_NAME; 
non terminal ArrayList<NodoAST> NODOS_CHTML;

non terminal String ELEMENTO_NAME;

start with S;

//**********************************************************************************************************
S ::= NODO_CHTML:n{:
    parser.ast = new AST();
    parser.ast.raiz = n;
:};

NODOS_CHTML ::= NODOS_CHTML:es NODO_CHTML:e{:
        ArrayList<NodoAST> nodos = es;
        nodos.add(e);
        RESULT = nodos;
    :}
    | NODO_CHTML:e{:
        ArrayList<NodoAST> nodos = new ArrayList<NodoAST>();
        nodos.add(e);
        RESULT = nodos;
    :}
;

NODO_CHTML ::= TAG_INI:ta NODOS_CHTML:ns TAG_FIN:tc {:
        ta.hijos.addAll(ns);
        RESULT = ta;
        if (ta.tipo != tc.tipo)
            agregarError(tc.lexema, tcleft+1, tcright+1, "Las etiquetas no coinciden. Se esperaba el cierre de" + ta.lexema);
            
        if (ta.tipo == TipoNodo.chtml){
            NodoAST enc = ta.getHijo(0);
            if (enc != null){
                if (enc.tipo == TipoNodo.encabezado){
                    for (NodoAST nodoEnc : enc.hijos){
                        if (nodoEnc.tipo == TipoNodo.cjs || nodoEnc.tipo == TipoNodo.ccss){
                            NodoAST atribs = nodoEnc.getHijo(0);
                            String nombreArchivo = "";
                            if (atribs != null){
                                if (atribs.tipo == TipoNodo.atribs){
                                    NodoAST elemento = atribs.getHijo(0);
                                    if (elemento != null){
                                        if (elemento.valor.toString().toLowerCase().equals("ruta")){
                                            nombreArchivo = elemento.getHijo(0).lexema;                                                                                        
                                        }
                                    }
                                }else if (atribs.tipo == TipoNodo.textoPlano){
                                    nombreArchivo = atribs.lexema;
                                }                                                                        
                            }
                            if (nombreArchivo.length() > 0){
                                AnalisisSintactico sintactico = new AnalisisSintactico(nombreArchivo, errores);
                                //se analiza el archivo fuente y se produce un Arbol de sintaxis abstracta (ast)
                                if (sintactico.generarAST()){
                                    nodoEnc.agregarHijo(sintactico.getAST().raiz);                                                      
                                }
                            }
                        }else{
                            agregarError(nodoEnc.lexema, nodoEnc.linea-1, nodoEnc.columna-1, "Se esperaba ccss o cjs");
                        }
                    }
                }else{
                    agregarError(enc.lexema, enc.linea-1, enc.columna-1, "Se esperaba el encabezado del archivo");
                }
            }
        }
    :}
    | TAG_INI:ta TAG_FIN:tc {:
        RESULT = ta;
    :}    
    | textoPlano:t {: 
        RESULT = new NodoAST(TipoNodo.textoPlano, t, tleft, tright, parser.sourceFile); 
    :}
    | salto:n  {: 
        RESULT = new NodoAST(TipoNodo.salto, n, nleft, nright, parser.sourceFile); 
    :}    
;

TAG_INI ::= LT TAG_NAME:tn ATRIBS:atribs GT {:        
        tn.agregarHijo(atribs);
        RESULT = tn;
    :}
    | LT TAG_NAME:tn GT {:
        RESULT = tn;
    :}
    | error GT:e {:        
        RESULT = new NodoAST(TipoNodo.errorSintactico, "Error antes de <", eleft, eright, parser.sourceFile);
    :}    
;


TAG_FIN ::= LT TAG_FIN_NAME:tn GT {:
        RESULT = tn;
    :}
    | LT:e TAG_FIN_NAME:tn {:
        RESULT = tn;
        agregarError("", eleft+1, eright+1, "Se esperaba >");
    :}
    | TAG_FIN_NAME:tn GT{:
        RESULT = tn;
        agregarError("", tnleft+1, tnright+1, "Se esperaba >");
    :}
;

ATRIBS ::= ATRIBS:atribs ATRIB:atrib {:
        NodoAST nodoAtribs = atribs;
        nodoAtribs.agregarHijo(atrib);
        RESULT = nodoAtribs;
    :}
    | ATRIB:atrib {:
        RESULT = new NodoAST(TipoNodo.atribs, "ATRIBS", atribleft, atribright, parser.sourceFile, atrib);
    :}
;

ATRIB ::= ELEMENTO_NAME:e EQ cadenaValor:c ptoComa {:        
        NodoAST nodoValor = new NodoAST(TipoNodo.cadenaValor, c, cleft, cright, parser.sourceFile);
        RESULT = new NodoAST(TipoNodo.elemento, e, eleft, eright, parser.sourceFile, nodoValor);        
    :}
    | error ptoComa:p {:        
        RESULT = new NodoAST(TipoNodo.errorSintactico, "Error antes de ;", pleft, pright, parser.sourceFile);
    :}
;

TAG_NAME ::= 
      chtml:n  {: RESULT = new NodoAST(TipoNodo.chtml, n, nleft, nright, parser.sourceFile); :}
    | encabezado:n  {: RESULT = new NodoAST(TipoNodo.encabezado, n, nleft, nright, parser.sourceFile); :}    
    | cjs:n  {: RESULT = new NodoAST(TipoNodo.cjs, n, nleft, nright, parser.sourceFile); :}
    | ccss:n {: RESULT = new NodoAST(TipoNodo.ccss, n, nleft, nright, parser.sourceFile); :}
    | cuerpo:n  {: RESULT = new NodoAST(TipoNodo.cuerpo, n, nleft, nright, parser.sourceFile); :}
    | titulo:n  {: RESULT = new NodoAST(TipoNodo.titulo, n, nleft, nright, parser.sourceFile); :}
    | panel:n  {: RESULT = new NodoAST(TipoNodo.panel, n, nleft, nright, parser.sourceFile); :}
    | texto:n  {: RESULT = new NodoAST(TipoNodo.texto, n, nleft, nright, parser.sourceFile); :}
    | imagen:n  {: RESULT = new NodoAST(TipoNodo.imagen, n, nleft, nright, parser.sourceFile); :}
    | boton:n  {: RESULT = new NodoAST(TipoNodo.boton, n, nleft, nright, parser.sourceFile); :}
    | enlace:n  {: RESULT = new NodoAST(TipoNodo.enlace, n, nleft, nright, parser.sourceFile); :}
    | tabla:n  {: RESULT = new NodoAST(TipoNodo.tabla, n, nleft, nright, parser.sourceFile); :}
    | fila:n  {: RESULT = new NodoAST(TipoNodo.fila, n, nleft, nright, parser.sourceFile); :}
    | celdaEnc:n  {: RESULT = new NodoAST(TipoNodo.celdaEnc, n, nleft, nright, parser.sourceFile); :}
    | celda:n  {: RESULT = new NodoAST(TipoNodo.celda, n, nleft, nright, parser.sourceFile); :}
    | areaTexto:n  {: RESULT = new NodoAST(TipoNodo.areaTexto, n, nleft, nright, parser.sourceFile); :}
    | cajaTexto:n  {: RESULT = new NodoAST(TipoNodo.cajaTexto, n, nleft, nright, parser.sourceFile); :}
    | cajaOpciones:n  {: RESULT = new NodoAST(TipoNodo.cajaOpciones, n, nleft, nright, parser.sourceFile); :}
    | opcion:n  {: RESULT = new NodoAST(TipoNodo.opcion, n, nleft, nright, parser.sourceFile); :}
    | spinner:n  {: RESULT = new NodoAST(TipoNodo.spinner, n, nleft, nright, parser.sourceFile); :}
;

TAG_FIN_NAME ::=
      chtmlF:n  {: RESULT = new NodoAST(TipoNodo.chtmlF, n, nleft, nright, parser.sourceFile); :}
    | encabezadoF:n  {: RESULT = new NodoAST(TipoNodo.encabezadoF, n, nleft, nright, parser.sourceFile); :}
    | cjsF:n  {: RESULT = new NodoAST(TipoNodo.cjsF, n, nleft, nright, parser.sourceFile); :}
    | ccssF:n {: RESULT = new NodoAST(TipoNodo.ccssF, n, nleft, nright, parser.sourceFile); :}
    | cuerpoF:n  {: RESULT = new NodoAST(TipoNodo.cuerpoF, n, nleft, nright, parser.sourceFile); :}
    | tituloF:n  {: RESULT = new NodoAST(TipoNodo.tituloF, n, nleft, nright, parser.sourceFile); :}
    | panelF:n  {: RESULT = new NodoAST(TipoNodo.panelF, n, nleft, nright, parser.sourceFile); :}
    | textoF:n  {: RESULT = new NodoAST(TipoNodo.textoF, n, nleft, nright, parser.sourceFile); :}
    | imagenF:n  {: RESULT = new NodoAST(TipoNodo.imagenF, n, nleft, nright, parser.sourceFile); :}
    | botonF:n  {: RESULT = new NodoAST(TipoNodo.botonF, n, nleft, nright, parser.sourceFile); :}
    | enlaceF:n  {: RESULT = new NodoAST(TipoNodo.enlaceF, n, nleft, nright, parser.sourceFile); :}
    | tablaF:n  {: RESULT = new NodoAST(TipoNodo.tablaF, n, nleft, nright, parser.sourceFile); :}
    | filaF:n  {: RESULT = new NodoAST(TipoNodo.filaF, n, nleft, nright, parser.sourceFile); :}
    | celdaEncF:n  {: RESULT = new NodoAST(TipoNodo.celdaEncF, n, nleft, nright, parser.sourceFile); :}
    | celdaF:n  {: RESULT = new NodoAST(TipoNodo.celdaF, n, nleft, nright, parser.sourceFile); :}
    | areaTextoF:n  {: RESULT = new NodoAST(TipoNodo.areaTextoF, n, nleft, nright, parser.sourceFile); :}
    | cajaTextoF:n  {: RESULT = new NodoAST(TipoNodo.cajaTextoF, n, nleft, nright, parser.sourceFile); :}
    | cajaOpcionesF:n  {: RESULT = new NodoAST(TipoNodo.cajaOpcionesF, n, nleft, nright, parser.sourceFile); :}
    | opcionF:n  {: RESULT = new NodoAST(TipoNodo.opcionF, n, nleft, nright, parser.sourceFile); :}
    | spinnerF:n  {: RESULT = new NodoAST(TipoNodo.spinnerF, n, nleft, nright, parser.sourceFile); :}    
;

ELEMENTO_NAME ::=
      ruta:n {: RESULT = n; :}
    | fondo:n {: RESULT = n; :}
    | click:n {: RESULT = n; :}
    | id:n {: RESULT = n; :}
    | grupo:n {: RESULT = n; :}    
    | alto:n {: RESULT = n; :}
    | ancho:n {: RESULT = n; :}        
    | alineado:n {: RESULT = n; :}
    | valor:n {: RESULT = n; :}
    | elementoDesconocido:n {: 
        RESULT = n;         
        agregarError(n, nleft+1, nright+1, "Nombre de elemento desconocido");    
    :}
;
