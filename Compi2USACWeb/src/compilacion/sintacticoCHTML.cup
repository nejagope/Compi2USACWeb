package compilacion;
import java_cup.runtime.*;
import java.util.ArrayList;

parser code
{:
    public AST ast;
    //la lista global de errores del analizador
    public ArrayList <ErrorCode> errores;

    //nombre del archivo fuente
    public String sourceFile;


    public ParserCHTML(java_cup.runtime.Scanner s, String archivoFuente,  ArrayList <ErrorCode> errores){
        super(s);
        this.sourceFile = archivoFuente;
        this.errores = errores;
    }
    
    
    public AST getAST(){
        return ast;
    }
    

    public ArrayList <ErrorCode> getErrores(){
        return errores;
    }

    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){

        errores.add(new ErrorCode(TipoError.sintactico, s.left+1, s.right+1, String.valueOf(s.value), "Sintaxis erronea", sourceFile));
        //System.err.println("Error de sintaxis en (" + (s.left+1) + ","+(s.right+1)+ "): " +s.value);
    }
   
    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        /* 
            Posibles causas:
                1- se encontró un error y no hay una posible reducción posterior al lugar donde se halló

        */
       errores.add(new ErrorCode(TipoError.sintactico, s.left+1, s.right+1, String.valueOf(s.value), "Sintaxis erronea", sourceFile));
       //System.err.println("Error IRRECUPERABLE de sintaxis en (" + (s.left+1) + ", " +(s.right+1)+ "): " +s.value);
    }
:}

action code
{:

:}

terminal LT, GT, EQ;
terminal chtml, encabezado, cjs, ccss, cuerpo, titulo, panel, texto, imagen, boton, enlace, tabla;
terminal fila, celdaEnc, celda, areaTexto, cajaTexto, cajaOpciones, opcion, spinner, salto;
terminal chtmlF, encabezadoF, cjsF, ccssF, cuerpoF, tituloF, panelF, textoF, imagenF, botonF, enlaceF, tablaF;
terminal filaF, celdaEncF, celdaF, areaTextoF, cajaTextoF, cajaOpcionesF, opcionF, spinnerF;

terminal String ruta, fondo, click, id, grupo, alto, ancho, alineado, valor;

terminal cadenaValor, ptoComa;

terminal String elementoDesconocido, textoPlano;
terminal errorLex;

non terminal S;
non terminal NodoAST CHTML, ENCABEZADO, CUERPO, CJS, CCSS, TITULO, PANEL, TEXTO, IMAGEN, BOTON, ENLACE, TABLA;
non terminal NodoAST FILA, CELDA_ENC, CELDA, AREA_TEXTO, CAJA_TEXTO, CAJA_OPCIONES, SPINNER, SALTO;
non terminal NodoAST RUTA, FONDO, CLICK, ID, GRUPO, ALTO, ANCHO, ALINEADO, VALOR;
non terminal NodoAST TAGS_ENCABEZADO, TAG_ENCABEZADO, ERROR;

non terminal NodoAST TAG, ATRIBS, ATRIB, NODO_CHTML, TAG_NAME, TAG_INI, TAG_FIN, TAG_FIN_NAME; 
non terminal ArrayList<NodoAST> NODOS_CHTML;

non terminal String ELEMENTO_NAME;

start with S;

//**********************************************************************************************************
S ::= NODO_CHTML:n{:
    parser.ast = new AST();
    parser.ast.raiz = n;
:};

NODOS_CHTML ::= NODOS_CHTML:es NODO_CHTML:e{:
        ArrayList<NodoAST> nodos = es;
        nodos.add(e);
        RESULT = nodos;
    :}
    | NODO_CHTML:e{:
        ArrayList<NodoAST> nodos = new ArrayList<NodoAST>();
        nodos.add(e);
        RESULT = nodos;
    :};

NODO_CHTML ::= TAG_INI:ta NODOS_CHTML:ns TAG_FIN:tc {:
        ta.hijos.addAll(ns);
        RESULT = ta;
    :}
    | TAG_INI:ta TAG_FIN:tc {:
        RESULT = ta;
    :}
    | textoPlano:t {: RESULT = new NodoAST(TipoNodo.textoPlano, t, tleft, tright, parser.sourceFile); :}
;

TAG_INI ::= LT TAG_NAME:tn ATRIBS:atribs GT {:        
        tn.agregarHijo(atribs);
        RESULT = tn;
    :}
    | LT TAG_NAME:tn GT {:
        RESULT = tn;
    :}
;


TAG_FIN ::= LT TAG_FIN_NAME:tn GT {:
        RESULT = tn;
    :}
;

ATRIBS ::= ATRIBS:atribs ATRIB:atrib {:
        NodoAST nodoAtribs = atribs;
        nodoAtribs.agregarHijo(atrib);
        RESULT = nodoAtribs;
    :}
    | ATRIB:atrib {:
        RESULT = new NodoAST(TipoNodo.atribs, "ATRIBS", atribleft, atribright, parser.sourceFile, atrib);
    :}
;

ATRIB ::= ELEMENTO_NAME:e EQ cadenaValor:c ptoComa {:
        NodoAST nodoElemento = new NodoAST(TipoNodo.elemento, e, eleft, eright, parser.sourceFile);
        NodoAST nodoValor = new NodoAST(TipoNodo.cadenaValor, c, cleft, cright, parser.sourceFile);
        RESULT = new NodoAST(TipoNodo.atrib, "ATRIB", eleft, eright, parser.sourceFile, nodoElemento, nodoValor);
    :}
;

TAG_NAME ::= 
      chtml:n  {: RESULT = new NodoAST(TipoNodo.chtml, n, nleft, nright, parser.sourceFile); :}
    | encabezado:n  {: RESULT = new NodoAST(TipoNodo.encabezado, n, nleft, nright, parser.sourceFile); :}    
    | cjs:n  {: RESULT = new NodoAST(TipoNodo.cjs, n, nleft, nright, parser.sourceFile); :}
    | ccss:n {: RESULT = new NodoAST(TipoNodo.ccss, n, nleft, nright, parser.sourceFile); :}
    | cuerpo:n  {: RESULT = new NodoAST(TipoNodo.cuerpo, n, nleft, nright, parser.sourceFile); :}
    | titulo:n  {: RESULT = new NodoAST(TipoNodo.titulo, n, nleft, nright, parser.sourceFile); :}
    | panel:n  {: RESULT = new NodoAST(TipoNodo.panel, n, nleft, nright, parser.sourceFile); :}
    | texto:n  {: RESULT = new NodoAST(TipoNodo.texto, n, nleft, nright, parser.sourceFile); :}
    | imagen:n  {: RESULT = new NodoAST(TipoNodo.imagen, n, nleft, nright, parser.sourceFile); :}
    | boton:n  {: RESULT = new NodoAST(TipoNodo.boton, n, nleft, nright, parser.sourceFile); :}
    | enlace:n  {: RESULT = new NodoAST(TipoNodo.enlace, n, nleft, nright, parser.sourceFile); :}
    | tabla:n  {: RESULT = new NodoAST(TipoNodo.tabla, n, nleft, nright, parser.sourceFile); :}
    | fila:n  {: RESULT = new NodoAST(TipoNodo.fila, n, nleft, nright, parser.sourceFile); :}
    | celdaEnc:n  {: RESULT = new NodoAST(TipoNodo.celdaEnc, n, nleft, nright, parser.sourceFile); :}
    | celda:n  {: RESULT = new NodoAST(TipoNodo.celda, n, nleft, nright, parser.sourceFile); :}
    | areaTexto:n  {: RESULT = new NodoAST(TipoNodo.areaTexto, n, nleft, nright, parser.sourceFile); :}
    | cajaTexto:n  {: RESULT = new NodoAST(TipoNodo.cajaTexto, n, nleft, nright, parser.sourceFile); :}
    | cajaOpciones:n  {: RESULT = new NodoAST(TipoNodo.cajaOpciones, n, nleft, nright, parser.sourceFile); :}
    | opcion:n  {: RESULT = new NodoAST(TipoNodo.opcion, n, nleft, nright, parser.sourceFile); :}
    | spinner:n  {: RESULT = new NodoAST(TipoNodo.spinner, n, nleft, nright, parser.sourceFile); :}
    | salto:n  {: RESULT = new NodoAST(TipoNodo.salto, n, nleft, nright, parser.sourceFile); :}
;

TAG_FIN_NAME ::=
      chtmlF:n  {: RESULT = new NodoAST(TipoNodo.chtmlF, n, nleft, nright, parser.sourceFile); :}
    | encabezadoF:n  {: RESULT = new NodoAST(TipoNodo.encabezadoF, n, nleft, nright, parser.sourceFile); :}
    | cjsF:n  {: RESULT = new NodoAST(TipoNodo.cjsF, n, nleft, nright, parser.sourceFile); :}
    | ccssF:n {: RESULT = new NodoAST(TipoNodo.ccssF, n, nleft, nright, parser.sourceFile); :}
    | cuerpoF:n  {: RESULT = new NodoAST(TipoNodo.cuerpoF, n, nleft, nright, parser.sourceFile); :}
    | tituloF:n  {: RESULT = new NodoAST(TipoNodo.tituloF, n, nleft, nright, parser.sourceFile); :}
    | panelF:n  {: RESULT = new NodoAST(TipoNodo.panelF, n, nleft, nright, parser.sourceFile); :}
    | textoF:n  {: RESULT = new NodoAST(TipoNodo.textoF, n, nleft, nright, parser.sourceFile); :}
    | imagenF:n  {: RESULT = new NodoAST(TipoNodo.imagenF, n, nleft, nright, parser.sourceFile); :}
    | botonF:n  {: RESULT = new NodoAST(TipoNodo.botonF, n, nleft, nright, parser.sourceFile); :}
    | enlaceF:n  {: RESULT = new NodoAST(TipoNodo.enlaceF, n, nleft, nright, parser.sourceFile); :}
    | tablaF:n  {: RESULT = new NodoAST(TipoNodo.tablaF, n, nleft, nright, parser.sourceFile); :}
    | filaF:n  {: RESULT = new NodoAST(TipoNodo.filaF, n, nleft, nright, parser.sourceFile); :}
    | celdaEncF:n  {: RESULT = new NodoAST(TipoNodo.celdaEncF, n, nleft, nright, parser.sourceFile); :}
    | celdaF:n  {: RESULT = new NodoAST(TipoNodo.celdaF, n, nleft, nright, parser.sourceFile); :}
    | areaTextoF:n  {: RESULT = new NodoAST(TipoNodo.areaTextoF, n, nleft, nright, parser.sourceFile); :}
    | cajaTextoF:n  {: RESULT = new NodoAST(TipoNodo.cajaTextoF, n, nleft, nright, parser.sourceFile); :}
    | cajaOpcionesF:n  {: RESULT = new NodoAST(TipoNodo.cajaOpcionesF, n, nleft, nright, parser.sourceFile); :}
    | opcionF:n  {: RESULT = new NodoAST(TipoNodo.opcionF, n, nleft, nright, parser.sourceFile); :}
    | spinnerF:n  {: RESULT = new NodoAST(TipoNodo.spinnerF, n, nleft, nright, parser.sourceFile); :}
;

ELEMENTO_NAME ::=
      ruta:n {: RESULT = n; :}
    | fondo:n {: RESULT = n; :}
    | click:n {: RESULT = n; :}
    | id:n {: RESULT = n; :}
    | grupo:n {: RESULT = n; :}    
    | alto:n {: RESULT = n; :}
    | ancho:n {: RESULT = n; :}        
    | alineado:n {: RESULT = n; :}
    | valor:n {: RESULT = n; :}
    | elementoDesconocido:n {: RESULT = n; :}
;
    
//**********************************************************************************************************
/*
CHTML ::= LT TAG_NAME:ch GT ENCABEZADO:e  CUERPO:c LT TAG_NAME:chf GT {:
    RESULT = new NodoAST(TipoNodo.chtml, "CHTML", chleft, chright, parser.sourceFile, e, c);
:};

ENCABEZADO ::= LT TAG_NAME:e TAGS_ENCABEZADO:te TAG_NAME:ef GT {:    
    RESULT = te;
:}
| ERROR:e {:
    RESULT = e;
:};

TAGS_ENCABEZADO ::= TAGS_ENCABEZADO:ts TAG_ENCABEZADO:t {:
    NodoAST nodoEnc = ts;
    ts.agregarHijo(t);
:}
|  TAG_ENCABEZADO:t {:    
    RESULT = new NodoAST(TipoNodo.encabezado, "ENCABEZADO", eleft, eright, parser.sourceFile, t);         
:};

TAG_ENCABEZADO ::= CJS:c {:
    RESULT = c;
:}
|CCSS:c {:
    RESULT = c;
:};


CJS ::= LT cjs:c ELEMENTO:e GT LT cjsF GT{:
    NodoAST nodoCjs = new NodoAST(TipoNodo.c, , cleft, cright, parser.sourceFile, e);         
    RESULT = nodoCjs;
:};

CCSS ::= LT ccss:c ELEMENTO:e GT LT ccssF GT{:
    NodoAST nodoCjs = new NodoAST(TipoNodo.c, , cleft, cright, parser.sourceFile, e);         
    RESULT = nodoCjs;
:};

ELEMENTO ::= NOMBRE_ELEMENTO:e EQ cadenaValor:c {:
    NodoAST nodoValor = new NodoAST(TipoNodo.cadenaValor, c, cleft, cright, parser.sourceFile);         
    RESULT = new NodoAST(TipoNodo.elemento, e, eleft, eright, parser.sourceFile, nodoValor);         
:}

CUERPO ::= LT cuerpo:c cuerpoF:cf GT {:
    RESULT = new NodoAST(TipoNodo.cuerpo, "CUERPO", cleft, cright, parser.sourceFile);
:}
| ERROR:e {:
    RESULT = e;
:};

ERROR ::= error:e GT{:
    RESULT = new NodoAST(TipoNodo.errorSintactico, "ERRS", eleft, eright, parser.sourceFile);
:};
*/

/*
PROGRAMA ::= ENCABEZADO:E BLOQUES:bloques {:
    NodoAST nodoProg = new NodoAST(TipoNodo.programa, "PROGRAMA", Eleft, Eright, parser.sourceFile);
    NodoAST nodoEnc = E;
    nodoProg.hijos.addAll(E.hijos);
    nodoProg.hijos.addAll(bloques.hijos);
    RESULT = nodoProg;
:};

ENCABEZADO ::= PROGRAM:bloq BLOQUES_ENCABEZADO:bloques{:        
    NodoAST nodoEncabezado = new NodoAST(TipoNodo.programa, "TEMP", bloqleft, bloqright, parser.sourceFile, bloq);
    nodoEncabezado.hijos.addAll(bloques.hijos);
    RESULT = nodoEncabezado;
:}
| PROGRAM:b {: RESULT = new NodoAST(TipoNodo.program, "PROGRAM", bleft, bright, parser.sourceFile, b); :}
| ERROR_ENCABEZADO:e {: RESULT = new NodoAST(TipoNodo.programa, "TEMP", eleft, eright, parser.sourceFile, e); :};

BLOQUES_ENCABEZADO ::=  BLOQUES_ENCABEZADO:bloqs BLOQUE_ENCABEZADO:bloq {:
    NodoAST nodoProg = bloqs;
    bloqs.agregarHijo(bloq);
    RESULT = nodoProg;
:}
| BLOQUE_ENCABEZADO:b {:
    RESULT = new NodoAST(TipoNodo.programa, "TEMP", bleft, bright, parser.sourceFile, b);
:};

BLOQUE_ENCABEZADO ::= DECLARACION_PRIMI:B {:RESULT = B;:} 
| DECLARACION_MATRIZ:B {:RESULT = B;:} 
| USES:B {:RESULT = B;:}
;

USES::= uses:u id:i extension ptoComa {: NodoAST nodoUses = new NodoAST(TipoNodo.uses, "uses", uleft, uright, parser.sourceFile,  
    new NodoAST(TipoNodo.cadena, String.valueOf(i) + ".deco", ileft, iright, parser.sourceFile)); 
    
    //Se realiza un nuevo analisis sintactico el cula producirá un AST el cual será el segundo hijo de el nodo "uses"

    AnalisisSintactico a = new AnalisisSintactico(String.valueOf(i) + ".deco", parser.errores);
    a.generarAST();
    AST ast = a.getAST();
    if (ast != null){
        if (ast.raiz != null)
            nodoUses.agregarHijo(ast.raiz);
    }else{
        if (!a.existeArchivoFuente()){
            ErrorCode error = new ErrorCode(TipoError.archivoNoEncontrado, ileft+1, iright+1, 
                String.valueOf(i) + ".deco" , "Archivo no encontrado", parser.sourceFile);
            parser.errores.add(error);
        }
    }
    
    RESULT = nodoUses;

:};


//----------------------------------ERROR-----------------------------------------
ERROR_ENCABEZADO ::= error:e id ptoComa{: RESULT = new NodoAST(TipoNodo.errorSintactico, "errorSint", eleft, eright, parser.sourceFile); :}
| error:e extension ptoComa{: RESULT = new NodoAST(TipoNodo.errorSintactico, "errorSint", eleft, eright, parser.sourceFile); :}
| error:e parenC ptoComa{: RESULT = new NodoAST(TipoNodo.errorSintactico, "errorSint", eleft, eright, parser.sourceFile); :}
| error:e end{: RESULT = new NodoAST(TipoNodo.errorSintactico, "errorSint", eleft, eright, parser.sourceFile); :};

ERROR ::= error:e ptoComa{: RESULT = new NodoAST(TipoNodo.errorSintactico, "errorSint", eleft, eright, parser.sourceFile); :}
|error:e end{: RESULT = new NodoAST(TipoNodo.errorSintactico, "errorSint", eleft, eright, parser.sourceFile); :};


DECLARACION_PRIMI ::= var:v TIPO_DATO:t dosPtos IDS:l ptoComa{:    
    NodoAST nodoDecla = new NodoAST(TipoNodo.declaracion, "DECL", vleft, vright, parser.sourceFile);
    nodoDecla.agregarHijo(t);
    ArrayList <NodoAST> listaIds = (ArrayList <NodoAST>)l;
    for (NodoAST nodoId: listaIds){
        nodoDecla.hijos.add(nodoId);
    }
    RESULT = nodoDecla;
:}
;

TIPO_DATO ::= entero:t {: RESULT = new NodoAST(TipoNodo.entero, "int", tleft, tright, parser.sourceFile); :}
| doble:t {: RESULT = new NodoAST(TipoNodo.doble, "double", tleft, tright, parser.sourceFile); :}
| booleano:t {: RESULT = new NodoAST(TipoNodo.booleano, "bool", tleft, tright, parser.sourceFile); :}
| caracter:t {: RESULT = new NodoAST(TipoNodo.caracter, "char", tleft, tright, parser.sourceFile); :}
| cadena:t {: RESULT = new NodoAST(TipoNodo.cadena, "string", tleft, tright, parser.sourceFile); :}
;
*/
