
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilacion;

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCHTML extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TokensCHTML.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCHTML() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCHTML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCHTML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\003\000\002\053" +
    "\004\000\002\053\003\000\002\046\005\000\002\046\004" +
    "\000\002\046\003\000\002\050\006\000\002\050\005\000" +
    "\002\051\005\000\002\044\004\000\002\044\003\000\002" +
    "\045\006\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\003\000\002\054\003\000\002\054\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\006\004\004\074\010\001\002\000\054\007" +
    "\037\010\056\011\051\012\035\013\043\014\055\015\031" +
    "\016\057\017\024\020\065\021\053\022\040\023\036\024" +
    "\026\025\025\026\022\027\046\030\041\031\050\032\044" +
    "\033\061\001\002\000\004\002\116\001\002\000\006\004" +
    "\011\074\010\001\002\000\004\002\000\001\002\000\010" +
    "\002\ufffb\004\ufffb\074\ufffb\001\002\000\124\007\037\010" +
    "\056\011\051\012\035\013\043\014\055\015\031\016\057" +
    "\017\024\020\065\021\053\022\040\023\036\024\026\025" +
    "\025\026\022\027\046\030\041\031\050\032\044\033\061" +
    "\034\047\035\070\036\021\037\067\040\062\041\030\042" +
    "\052\043\020\044\064\045\032\046\023\047\045\050\027" +
    "\051\066\052\060\053\034\054\071\055\054\056\042\057" +
    "\063\001\002\000\010\002\ufffc\004\ufffc\074\ufffc\001\002" +
    "\000\006\004\011\074\010\001\002\000\006\004\ufffe\074" +
    "\ufffe\001\002\000\010\002\ufffd\004\ufffd\074\ufffd\001\002" +
    "\000\006\004\uffff\074\uffff\001\002\000\030\005\102\060" +
    "\074\061\101\062\106\063\073\064\105\065\110\066\100" +
    "\067\104\070\076\073\075\001\002\000\004\005\uffd8\001" +
    "\002\000\004\005\uffdd\001\002\000\030\005\uffe5\060\uffe5" +
    "\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067" +
    "\uffe5\070\uffe5\073\uffe5\001\002\000\004\005\uffd5\001\002" +
    "\000\030\005\uffec\060\uffec\061\uffec\062\uffec\063\uffec\064" +
    "\uffec\065\uffec\066\uffec\067\uffec\070\uffec\073\uffec\001\002" +
    "\000\030\005\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064" +
    "\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6\073\uffe6\001\002" +
    "\000\030\005\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064" +
    "\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7\073\uffe7\001\002" +
    "\000\004\005\uffd3\001\002\000\004\005\uffda\001\002\000" +
    "\030\005\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064\uffee" +
    "\065\uffee\066\uffee\067\uffee\070\uffee\073\uffee\001\002\000" +
    "\004\005\uffd6\001\002\000\004\005\072\001\002\000\004" +
    "\005\uffd0\001\002\000\030\005\ufff1\060\ufff1\061\ufff1\062" +
    "\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070\ufff1" +
    "\073\ufff1\001\002\000\030\005\uffe8\060\uffe8\061\uffe8\062" +
    "\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8" +
    "\073\uffe8\001\002\000\030\005\ufff4\060\ufff4\061\ufff4\062" +
    "\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\070\ufff4" +
    "\073\ufff4\001\002\000\030\005\uffe9\060\uffe9\061\uffe9\062" +
    "\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9" +
    "\073\uffe9\001\002\000\030\005\uffe3\060\uffe3\061\uffe3\062" +
    "\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\070\uffe3" +
    "\073\uffe3\001\002\000\004\005\uffcd\001\002\000\030\005" +
    "\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0" +
    "\066\ufff0\067\ufff0\070\ufff0\073\ufff0\001\002\000\030\005" +
    "\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1" +
    "\066\uffe1\067\uffe1\070\uffe1\073\uffe1\001\002\000\004\005" +
    "\uffd4\001\002\000\030\005\uffe4\060\uffe4\061\uffe4\062\uffe4" +
    "\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\070\uffe4\073" +
    "\uffe4\001\002\000\004\005\uffdf\001\002\000\030\005\uffe2" +
    "\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\066" +
    "\uffe2\067\uffe2\070\uffe2\073\uffe2\001\002\000\030\005\ufff2" +
    "\060\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066" +
    "\ufff2\067\ufff2\070\ufff2\073\ufff2\001\002\000\004\005\uffd9" +
    "\001\002\000\030\005\uffea\060\uffea\061\uffea\062\uffea\063" +
    "\uffea\064\uffea\065\uffea\066\uffea\067\uffea\070\uffea\073\uffea" +
    "\001\002\000\004\005\uffce\001\002\000\030\005\uffef\060" +
    "\uffef\061\uffef\062\uffef\063\uffef\064\uffef\065\uffef\066\uffef" +
    "\067\uffef\070\uffef\073\uffef\001\002\000\030\005\ufff3\060" +
    "\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3" +
    "\067\ufff3\070\ufff3\073\ufff3\001\002\000\030\005\uffed\060" +
    "\uffed\061\uffed\062\uffed\063\uffed\064\uffed\065\uffed\066\uffed" +
    "\067\uffed\070\uffed\073\uffed\001\002\000\004\005\uffd1\001" +
    "\002\000\030\005\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0" +
    "\064\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0\073\uffe0\001" +
    "\002\000\004\005\uffdb\001\002\000\004\005\uffcc\001\002" +
    "\000\004\005\uffd7\001\002\000\030\005\uffeb\060\uffeb\061" +
    "\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb" +
    "\070\uffeb\073\uffeb\001\002\000\004\005\uffd2\001\002\000" +
    "\004\005\uffdc\001\002\000\004\005\uffde\001\002\000\004" +
    "\005\uffcf\001\002\000\010\002\ufff8\004\ufff8\074\ufff8\001" +
    "\002\000\004\006\uffc8\001\002\000\004\006\uffcb\001\002" +
    "\000\004\006\uffc2\001\002\000\004\006\uffc3\001\002\000" +
    "\030\005\114\060\074\061\101\062\106\063\073\064\105" +
    "\065\110\066\100\067\104\070\076\073\075\001\002\000" +
    "\004\006\uffc5\001\002\000\004\006\uffca\001\002\000\006" +
    "\004\ufff9\074\ufff9\001\002\000\004\006\111\001\002\000" +
    "\004\006\uffc4\001\002\000\004\006\uffc7\001\002\000\004" +
    "\006\uffc9\001\002\000\030\005\ufff6\060\ufff6\061\ufff6\062" +
    "\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6" +
    "\073\ufff6\001\002\000\004\006\uffc6\001\002\000\004\071" +
    "\112\001\002\000\004\072\113\001\002\000\030\005\ufff5" +
    "\060\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066" +
    "\ufff5\067\ufff5\070\ufff5\073\ufff5\001\002\000\006\004\ufffa" +
    "\074\ufffa\001\002\000\030\005\ufff7\060\ufff7\061\ufff7\062" +
    "\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7\070\ufff7" +
    "\073\ufff7\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\010\002\004\046\006\050\005\001\001\000" +
    "\004\047\016\001\001\000\002\001\001\000\012\046\013" +
    "\050\005\051\011\053\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\047\016\052\032\001\001\000\002" +
    "\001\001\000\010\046\015\050\005\051\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\044\076\045\106\054\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\045\114\054\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCHTML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCHTML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCHTML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public AST ast;
    //la lista global de errores del analizador
    public ArrayList <ErrorCode> errores;

    //nombre del archivo fuente
    public String sourceFile;


    public ParserCHTML(java_cup.runtime.Scanner s, String archivoFuente,  ArrayList <ErrorCode> errores){
        super(s);
        this.sourceFile = archivoFuente;
        this.errores = errores;
    }
    
    
    public AST getAST(){
        return ast;
    }
    

    public ArrayList <ErrorCode> getErrores(){
        return errores;
    }

    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){

        errores.add(new ErrorCode(TipoError.sintactico, s.left+1, s.right+1, String.valueOf(s.value), "Sintaxis erronea", sourceFile));
        //System.err.println("Error de sintaxis en (" + (s.left+1) + ","+(s.right+1)+ "): " +s.value);
    }
   
    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        /* 
            Posibles causas:
                1- se encontró un error y no hay una posible reducción posterior al lugar donde se halló

        */
       errores.add(new ErrorCode(TipoError.sintactico, s.left+1, s.right+1, String.valueOf(s.value), "Sintaxis erronea", sourceFile));
       //System.err.println("Error IRRECUPERABLE de sintaxis en (" + (s.left+1) + ", " +(s.right+1)+ "): " +s.value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCHTML$actions {




  private final ParserCHTML parser;

  /** Constructor */
  CUP$ParserCHTML$actions(ParserCHTML parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCHTML$do_action_part00000000(
    int                        CUP$ParserCHTML$act_num,
    java_cup.runtime.lr_parser CUP$ParserCHTML$parser,
    java.util.Stack            CUP$ParserCHTML$stack,
    int                        CUP$ParserCHTML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCHTML$result;

      /* select the action based on the action number */
      switch (CUP$ParserCHTML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).value;
		RESULT = start_val;
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCHTML$parser.done_parsing();
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= NODO_CHTML 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		NodoAST n = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		
    parser.ast = new AST();
    parser.ast.raiz = n;

              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NODOS_CHTML ::= NODOS_CHTML NODO_CHTML 
            {
              ArrayList<NodoAST> RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).right;
		ArrayList<NodoAST> es = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		
        ArrayList<NodoAST> nodos = es;
        nodos.add(e);
        RESULT = nodos;
    
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("NODOS_CHTML",41, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NODOS_CHTML ::= NODO_CHTML 
            {
              ArrayList<NodoAST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		NodoAST e = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		
        ArrayList<NodoAST> nodos = new ArrayList<NodoAST>();
        nodos.add(e);
        RESULT = nodos;
    
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("NODOS_CHTML",41, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NODO_CHTML ::= TAG_INI NODOS_CHTML TAG_FIN 
            {
              NodoAST RESULT =null;
		int taleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-2)).left;
		int taright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-2)).right;
		NodoAST ta = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-2)).value;
		int nsleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).right;
		ArrayList<NodoAST> ns = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).value;
		int tcleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		NodoAST tc = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		
        ta.hijos.addAll(ns);
        RESULT = ta;
    
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("NODO_CHTML",36, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NODO_CHTML ::= TAG_INI TAG_FIN 
            {
              NodoAST RESULT =null;
		int taleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).left;
		int taright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).right;
		NodoAST ta = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).value;
		int tcleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		NodoAST tc = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		
        RESULT = ta;
    
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("NODO_CHTML",36, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NODO_CHTML ::= textoPlano 
            {
              NodoAST RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.textoPlano, t, tleft, tright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("NODO_CHTML",36, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TAG_INI ::= LT TAG_NAME ATRIBS GT 
            {
              NodoAST RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-2)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-2)).right;
		NodoAST tn = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-2)).value;
		int atribsleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).left;
		int atribsright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).right;
		NodoAST atribs = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).value;
		        
        tn.agregarHijo(atribs);
        RESULT = tn;
    
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_INI",38, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TAG_INI ::= LT TAG_NAME GT 
            {
              NodoAST RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).right;
		NodoAST tn = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).value;
		
        RESULT = tn;
    
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_INI",38, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TAG_FIN ::= LT TAG_FIN_NAME GT 
            {
              NodoAST RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).right;
		NodoAST tn = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).value;
		
        RESULT = tn;
    
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_FIN",39, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ATRIBS ::= ATRIBS ATRIB 
            {
              NodoAST RESULT =null;
		int atribsleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).left;
		int atribsright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).right;
		NodoAST atribs = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).value;
		int atribleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int atribright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		NodoAST atrib = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		
        NodoAST nodoAtribs = atribs;
        nodoAtribs.agregarHijo(atrib);
        RESULT = nodoAtribs;
    
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("ATRIBS",34, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ATRIBS ::= ATRIB 
            {
              NodoAST RESULT =null;
		int atribleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int atribright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		NodoAST atrib = (NodoAST)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		
        RESULT = new NodoAST(TipoNodo.atribs, "ATRIBS", atribleft, atribright, parser.sourceFile, atrib);
    
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("ATRIBS",34, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ATRIB ::= ELEMENTO_NAME EQ cadenaValor ptoComa 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-1)).value;
		
        NodoAST nodoElemento = new NodoAST(TipoNodo.elemento, e, eleft, eright, parser.sourceFile);
        NodoAST nodoValor = new NodoAST(TipoNodo.cadenaValor, c, cleft, cright, parser.sourceFile);
        RESULT = new NodoAST(TipoNodo.atrib, "ATRIB", eleft, eright, parser.sourceFile, nodoElemento, nodoValor);
    
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("ATRIB",35, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.elementAt(CUP$ParserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TAG_NAME ::= chtml 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.chtml, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_NAME",37, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TAG_NAME ::= encabezado 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.encabezado, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_NAME",37, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TAG_NAME ::= cjs 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.cjs, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_NAME",37, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TAG_NAME ::= ccss 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.ccss, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_NAME",37, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TAG_NAME ::= cuerpo 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.cuerpo, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_NAME",37, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TAG_NAME ::= titulo 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.titulo, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_NAME",37, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TAG_NAME ::= panel 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.panel, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_NAME",37, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TAG_NAME ::= texto 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.texto, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_NAME",37, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TAG_NAME ::= imagen 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.imagen, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_NAME",37, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TAG_NAME ::= boton 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.boton, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_NAME",37, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TAG_NAME ::= enlace 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.enlace, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_NAME",37, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TAG_NAME ::= tabla 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.tabla, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_NAME",37, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TAG_NAME ::= fila 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.fila, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_NAME",37, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TAG_NAME ::= celdaEnc 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.celdaEnc, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_NAME",37, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TAG_NAME ::= celda 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.celda, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_NAME",37, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TAG_NAME ::= areaTexto 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.areaTexto, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_NAME",37, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TAG_NAME ::= cajaTexto 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.cajaTexto, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_NAME",37, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TAG_NAME ::= cajaOpciones 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.cajaOpciones, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_NAME",37, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TAG_NAME ::= opcion 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.opcion, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_NAME",37, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TAG_NAME ::= spinner 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.spinner, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_NAME",37, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TAG_NAME ::= salto 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.salto, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_NAME",37, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TAG_FIN_NAME ::= chtmlF 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.chtmlF, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_FIN_NAME",40, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TAG_FIN_NAME ::= encabezadoF 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.encabezadoF, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_FIN_NAME",40, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TAG_FIN_NAME ::= cjsF 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.cjsF, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_FIN_NAME",40, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TAG_FIN_NAME ::= ccssF 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.ccssF, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_FIN_NAME",40, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TAG_FIN_NAME ::= cuerpoF 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.cuerpoF, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_FIN_NAME",40, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TAG_FIN_NAME ::= tituloF 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.tituloF, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_FIN_NAME",40, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TAG_FIN_NAME ::= panelF 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.panelF, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_FIN_NAME",40, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TAG_FIN_NAME ::= textoF 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.textoF, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_FIN_NAME",40, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TAG_FIN_NAME ::= imagenF 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.imagenF, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_FIN_NAME",40, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TAG_FIN_NAME ::= botonF 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.botonF, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_FIN_NAME",40, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TAG_FIN_NAME ::= enlaceF 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.enlaceF, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_FIN_NAME",40, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TAG_FIN_NAME ::= tablaF 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.tablaF, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_FIN_NAME",40, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TAG_FIN_NAME ::= filaF 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.filaF, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_FIN_NAME",40, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TAG_FIN_NAME ::= celdaEncF 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.celdaEncF, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_FIN_NAME",40, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TAG_FIN_NAME ::= celdaF 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.celdaF, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_FIN_NAME",40, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TAG_FIN_NAME ::= areaTextoF 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.areaTextoF, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_FIN_NAME",40, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TAG_FIN_NAME ::= cajaTextoF 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.cajaTextoF, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_FIN_NAME",40, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TAG_FIN_NAME ::= cajaOpcionesF 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.cajaOpcionesF, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_FIN_NAME",40, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TAG_FIN_NAME ::= opcionF 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.opcionF, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_FIN_NAME",40, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TAG_FIN_NAME ::= spinnerF 
            {
              NodoAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = new NodoAST(TipoNodo.spinnerF, n, nleft, nright, parser.sourceFile); 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("TAG_FIN_NAME",40, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELEMENTO_NAME ::= ruta 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = n; 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_NAME",42, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ELEMENTO_NAME ::= fondo 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = n; 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_NAME",42, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ELEMENTO_NAME ::= click 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = n; 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_NAME",42, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ELEMENTO_NAME ::= id 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = n; 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_NAME",42, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ELEMENTO_NAME ::= grupo 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = n; 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_NAME",42, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ELEMENTO_NAME ::= alto 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = n; 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_NAME",42, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ELEMENTO_NAME ::= ancho 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = n; 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_NAME",42, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ELEMENTO_NAME ::= alineado 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = n; 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_NAME",42, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ELEMENTO_NAME ::= valor 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = n; 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_NAME",42, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ELEMENTO_NAME ::= elementoDesconocido 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCHTML$stack.peek()).value;
		 RESULT = n; 
              CUP$ParserCHTML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_NAME",42, ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCHTML$stack.peek()), RESULT);
            }
          return CUP$ParserCHTML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCHTML$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCHTML$do_action(
    int                        CUP$ParserCHTML$act_num,
    java_cup.runtime.lr_parser CUP$ParserCHTML$parser,
    java.util.Stack            CUP$ParserCHTML$stack,
    int                        CUP$ParserCHTML$top)
    throws java.lang.Exception
    {
              return CUP$ParserCHTML$do_action_part00000000(
                               CUP$ParserCHTML$act_num,
                               CUP$ParserCHTML$parser,
                               CUP$ParserCHTML$stack,
                               CUP$ParserCHTML$top);
    }
}

}
