package compilacion;
import java_cup.runtime.*;
import java.util.ArrayList;


parser code
{:


public AST ast;
//la lista global de errores del analizador
public ArrayList <ErrorCode> errores;

//nombre del archivo fuente
public String sourceFile;


public ParserCJS(java_cup.runtime.Scanner s, String archivoFuente,  ArrayList <ErrorCode> errores){
    super(s);
    this.sourceFile = archivoFuente;
    this.errores = errores;
}

public AST getAST(){
    return ast;
}

public ArrayList <ErrorCode> getErrores(){
    return errores;
}

/**Metodo al que se llama automáticamente ante algún error sintactico.*/
public void syntax_error(Symbol s){

    errores.add(new ErrorCode(TipoError.sintactico, s.left+1, s.right+1, String.valueOf(s.value), "Sintaxis erronea", sourceFile));
    //System.err.println("Error de sintaxis en (" + (s.left+1) + ","+(s.right+1)+ "): " +s.value);
}
/**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    /* 
        Posibles causas:
            1- se encontró un error y no hay una posible reducción posterior al lugar donde se halló
        
    */
   errores.add(new ErrorCode(TipoError.sintactico, s.left+1, s.right+1, String.valueOf(s.value), "Sintaxis erronea", sourceFile));
   //System.err.println("Error IRRECUPERABLE de sintaxis en (" + (s.left+1) + ", " +(s.right+1)+ "): " +s.value);
}
:}
action code
{:

:}
terminal booleanoLiteral, dobleLiteral, enteroLiteral, cadenaLiteral, dateLiteral, dateTimeLiteral, id, errorLex;
terminal mas, por, menos, entre, potencia, inc, dec, mayor, menor, mayorI, menorI, igual, diferente, and, or, not;
terminal parenA, parenC, llaveA, llaveC;
terminal SIGNO;
terminal var, dosPtos, ptoComa, coma, asignacion, si, sino;
terminal select, caso, mientras, para, detener;
terminal funcion, retornar, punto;

terminal dimV, defecto, salir;

non terminal S , IDS, DIMENSIONES, DIMENSION, EXPRESIONES, INDICE_MATRIZ, INDICES_MATRIZ;
non terminal NodoAST SENTENCIA, EXP, ASIGNACION, DECLARACION, TIPO_DATO, DECLARACION_MATRIZ, DECLARACION_PRIMI;
non terminal NodoAST MATRIZ_LITERAL, BLOQUE_SENTENCIAS, IF, IF_ELSE, IF_ELSEIF, ELSEIFS, ELSEIF, SELECT, CASO, DECLARACIONES;
non terminal NodoAST WHILE, DO_WHILE, INC_DEC, REPEAT, LOOP, FOR, PROCEDURE, FUNCION;
non terminal NodoAST SET_OF_PARAMETROS, SETS_OF_PARAMETROS, LLAMADA, ARGUMENTOS, ERROR, BLOQUES, BLOQUE, USES, PROGRAMA, PROGRAM;
non terminal NodoAST ENCABEZADO, BLOQUE_ENCABEZADO, BLOQUES_ENCABEZADO, ERROR_ENCABEZADO, INSTRUCCION, SENTENCIAS, PARAMETROS;
non terminal ArrayList<NodoAST> INSTRUCCIONES;

non terminal CASOS;

precedence left or;
precedence left and;
precedence left not;

precedence left mayor, menor, mayorI, menorI, igual, diferente;

precedence left mas, menos;
precedence left por, entre;
precedence left SIGNO;
precedence left potencia;
precedence left inc, dec;

start with S;

S ::= PROGRAMA:p{:
        parser.ast = new AST();
        parser.ast.raiz = p;
    :}
;

PROGRAMA ::= INSTRUCCIONES:ins {:
        NodoAST nodoProg = new NodoAST(TipoNodo.programa, "PROGRAMA", insleft, insright, parser.sourceFile);    
        nodoProg.hijos.addAll(ins);
        RESULT = nodoProg;
    :}
;

INSTRUCCIONES ::= INSTRUCCIONES:is INSTRUCCION:i {:        
        is.add((NodoAST)i);
        RESULT = is;
    :}
    | INSTRUCCION:i {:
        ArrayList <NodoAST> ins = new ArrayList <NodoAST>();
        ins.add((NodoAST)i);
        RESULT = ins;
    :}
;

INSTRUCCION ::= SENTENCIA:i
    {:
        RESULT = i;
    :}
    | FUNCION:i
    {:
        RESULT = i;
    :}
;

FUNCION ::= funcion:f id:i parenA PARAMETROS:ps parenC BLOQUE:b {:
        RESULT = new NodoAST(TipoNodo.funcion, i, fleft, fright, parser.sourceFile, ps, b);  
    :}
    | funcion:f id:i parenA parenC BLOQUE:b   {:
        RESULT = new NodoAST(TipoNodo.funcion, i, fleft, fright, parser.sourceFile, b);  
    :}
;

PARAMETROS ::= PARAMETROS:ps coma id:p {:        
        ps.agregarHijo(new NodoAST(TipoNodo.identificador, p, pleft, pright , parser.sourceFile));
        RESULT = ps;
    :}
    | id:p{:
        NodoAST nodoP = new NodoAST(TipoNodo.identificador, p, pleft, pright , parser.sourceFile);
        RESULT = new NodoAST(TipoNodo.parametros, "PARAMS", pleft, pright, parser.sourceFile, nodoP);                                 
    :}
;
        
BLOQUE ::= llaveA:la SENTENCIAS:s llaveC {:        
        RESULT = s;
    :}     
;

SENTENCIAS ::= SENTENCIAS:ss SENTENCIA:s {:        
        ss.agregarHijo(s);
        RESULT = ss;
    :}
    | SENTENCIA:s {:
        RESULT = new NodoAST(TipoNodo.sentencias, "SENTS", sleft, sright, parser.sourceFile, s);                 
    :}
;

SENTENCIA ::=     
    ASIGNACION:s {: RESULT = s; :}        
    | id:i parenA parenC ptoComa {:
        RESULT = new NodoAST(TipoNodo.llamadaFuncion, "LLAMADA", ileft, iright, parser.sourceFile);  
    :}
;

ASIGNACION ::= id:i asignacion EXP:e ptoComa {:
        NodoAST nodoID = new NodoAST(TipoNodo.identificador, i, ileft, iright , parser.sourceFile);
        RESULT = new NodoAST(TipoNodo.asignacion, "=", ileft, iright,parser.sourceFile, nodoID, e);
    :}
;

EXP ::= EXP:e1 mas:op EXP:e2{:
        RESULT = new NodoAST(TipoNodo.mas, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | EXP:e1 menos:op EXP:e2{:
        RESULT = new NodoAST(TipoNodo.menos, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | EXP:e1 por:op EXP:e2{:
        RESULT = new NodoAST(TipoNodo.por, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | EXP:e1 entre:op EXP:e2{:
        RESULT = new NodoAST(TipoNodo.entre, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | EXP:e1 potencia:op EXP:e2{:
        RESULT = new NodoAST(TipoNodo.potencia, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | menos:op EXP:e{:
        RESULT = new NodoAST(TipoNodo.negativo, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e);
    :} %prec SIGNO
    | EXP:e1 mayor:op EXP:e2{:
        RESULT = new NodoAST(TipoNodo.mayor, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | EXP:e1 menor:op EXP:e2{:
        RESULT = new NodoAST(TipoNodo.menor, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | EXP:e1 mayorI:op  EXP:e2{:
        RESULT = new NodoAST(TipoNodo.mayorI, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | EXP:e1 menorI:op  EXP:e2{:
        RESULT = new NodoAST(TipoNodo.menorI, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | EXP:e1 igual:op  EXP:e2{:
        RESULT = new NodoAST(TipoNodo.igual, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | EXP:e1 diferente:op  EXP:e2{:
        RESULT = new NodoAST(TipoNodo.diferente, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | EXP:e1 and:op EXP:e2{:
        RESULT = new NodoAST(TipoNodo.and, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | EXP:e1 or:op EXP:e2{:
        RESULT = new NodoAST(TipoNodo.or, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | not:op EXP:e{:
        RESULT = new NodoAST(TipoNodo.not, String.valueOf(op), opleft, opright, parser.sourceFile, e);
    :}
    | parenA EXP:e parenC{:
        RESULT = e;
    :}
    | enteroLiteral:e{:
        RESULT = new NodoAST(TipoNodo.enteroLit, e, eleft, eright, parser.sourceFile);         
    :}
    | dobleLiteral:d{:
        RESULT = new NodoAST(TipoNodo.dobleLit, d, dleft, dright, parser.sourceFile);         
    :}
    | booleanoLiteral:b{:
        RESULT = new NodoAST(TipoNodo.booleanoLit, b, bleft, bright, parser.sourceFile);         
    :}
    | cadenaLiteral:c{:
        RESULT = new NodoAST(TipoNodo.cadenaLit, c, cleft, cright - 1, parser.sourceFile); 
        //el -1 porque no se incluye la comilla inicial en el token    
    :}
    | id:i{:
        RESULT = new NodoAST(TipoNodo.identificador, i, ileft, iright, parser.sourceFile);     
    :}
;


