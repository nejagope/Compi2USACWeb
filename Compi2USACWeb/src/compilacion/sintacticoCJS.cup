package compilacion;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

parser code
{:


public AST ast;
//la lista global de errores del analizador
public ArrayList <ErrorCode> errores;

//nombre del archivo fuente
public String sourceFile;


public ParserCJS(java_cup.runtime.Scanner s, String archivoFuente,  ArrayList <ErrorCode> errores){
    super(s);
    this.sourceFile = archivoFuente;
    this.errores = errores;
}

public AST getAST(){
    return ast;
}

public ArrayList <ErrorCode> getErrores(){
    return errores;
}

/**Metodo al que se llama automáticamente ante algún error sintactico.*/
public void syntax_error(Symbol s){

    errores.add(new ErrorCode(TipoError.sintactico, s.left+1, s.right+1, String.valueOf(s.value), "Sintaxis erronea", sourceFile));
    //System.err.println("Error de sintaxis en (" + (s.left+1) + ","+(s.right+1)+ "): " +s.value);
}
/**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    /* 
        Posibles causas:
            1- se encontró un error y no hay una posible reducción posterior al lugar donde se halló
        
    */
   errores.add(new ErrorCode(TipoError.sintactico, s.left+1, s.right+1, String.valueOf(s.value), "Sintaxis erronea", sourceFile));
   //System.err.println("Error IRRECUPERABLE de sintaxis en (" + (s.left+1) + ", " +(s.right+1)+ "): " +s.value);
}
:}
action code
{:

:}
terminal booleanoLiteral, dobleLiteral, enteroLiteral, cadenaLiteral, dateLiteral, dateTimeLiteral, id, errorLex;
terminal mas, por, menos, entre, potencia, inc, dec, mayor, menor, mayorI, menorI, igual, diferente, and, or, not;
terminal parenA, parenC, llaveA, llaveC;
terminal SIGNO;
terminal var, dosPtos, ptoComa, coma, si, sino;
terminal select, caso, mientras, para, detener;
terminal funcion, retornar, punto;

terminal dimV, defecto;

non terminal S , IDS, DIMENSIONES, DIMENSION, EXPRESIONES, INDICE_MATRIZ, INDICES_MATRIZ;
non terminal NodoAST SENTENCIA, EXP, ASIGNACION, DECLARACION, TIPO_DATO, DECLARACION_MATRIZ, DECLARACION_PRIMI;
non terminal NodoAST MATRIZ_LITERAL, BLOQUE_SENTENCIAS, IF, IF_ELSE, IF_ELSEIF, ELSEIFS, ELSEIF, SELECT, CASO, DECLARACIONES;
non terminal NodoAST WHILE, DO_WHILE, INC_DEC, REPEAT, LOOP, FOR, PROCEDURE, FUNCION;
non terminal NodoAST SET_OF_PARAMETROS, SETS_OF_PARAMETROS, LLAMADA, ARGUMENTOS, ERROR, BLOQUES, BLOQUE, USES, PROGRAMA, PROGRAM;
non terminal NodoAST ENCABEZADO, BLOQUE_ENCABEZADO, BLOQUES_ENCABEZADO, ERROR_ENCABEZADO, INSTRUCCION, SENTENCIAS, PARAMETROS, ARREGLO_LITERAL, MONO_OPERADOR;
non terminal ArrayList<NodoAST> INSTRUCCIONES, CASOS, EXPRS;

precedence left or;
precedence left and;
precedence left not;

precedence left mayor, menor, mayorI, menorI, igual, diferente;

precedence left mas, menos;
precedence left por, entre;
precedence left SIGNO;
precedence left potencia;
precedence left inc, dec;

start with S;

S ::= PROGRAMA:p{:
        parser.ast = new AST();
        parser.ast.raiz = p;
    :}
;

PROGRAMA ::= INSTRUCCIONES:ins {:
        NodoAST nodoProg = new NodoAST(TipoNodo.programa, "PROGRAMA", insleft, insright, parser.sourceFile);    
        nodoProg.hijos.addAll(ins);
        RESULT = nodoProg;
    :}
;

INSTRUCCIONES ::= INSTRUCCIONES:is INSTRUCCION:i {:        
        is.add((NodoAST)i);
        RESULT = is;
    :}
    | INSTRUCCION:i {:
        ArrayList <NodoAST> ins = new ArrayList <NodoAST>();
        ins.add((NodoAST)i);
        RESULT = ins;
    :}
;

INSTRUCCION ::= SENTENCIA:i
    {:
        RESULT = i;
    :}
    | FUNCION:i
    {:
        RESULT = i;
    :}
;

FUNCION ::= funcion:f id:i parenA PARAMETROS:ps parenC BLOQUE:b {:
        RESULT = new NodoAST(TipoNodo.funcion, i, fleft, fright, parser.sourceFile, ps, b);  
    :}
    | funcion:f id:i parenA parenC BLOQUE:b   {:
        RESULT = new NodoAST(TipoNodo.funcion, i, fleft, fright, parser.sourceFile, b);  
    :}
;

PARAMETROS ::= PARAMETROS:ps coma id:p {:        
        ps.agregarHijo(new NodoAST(TipoNodo.identificador, p, pleft, pright , parser.sourceFile));
        RESULT = ps;
    :}
    | id:p{:
        NodoAST nodoP = new NodoAST(TipoNodo.identificador, p, pleft, pright , parser.sourceFile);
        RESULT = new NodoAST(TipoNodo.parametros, "PARAMS", pleft, pright, parser.sourceFile, nodoP);                                 
    :}
;
        
BLOQUE ::= llaveA:la SENTENCIAS:s llaveC {:        
        RESULT = s;
    :}
    | llaveA:la llaveC:lc {:    
        RESULT = new NodoAST(TipoNodo.sentencias, "SENTS", laleft, laright, parser.sourceFile);                 
    :}    
;

SENTENCIAS ::= SENTENCIAS:ss SENTENCIA:s {:        
        ss.agregarHijo(s);
        RESULT = ss;
    :}
    | SENTENCIA:s {:
        RESULT = new NodoAST(TipoNodo.sentencias, "SENTS", sleft, sright, parser.sourceFile, s);                 
    :}
;

SENTENCIA ::= 
    DECLARACION:s  {: RESULT = s; :}        
    | ASIGNACION:s ptoComa{: RESULT = s; :}        
    | LLAMADA:s ptoComa{: RESULT = s; :}
    | IF:s {: RESULT = s; :}
    | SELECT:s {: RESULT = s; :}
    | FOR:s {: RESULT = s; :}
    | WHILE:s {: RESULT = s; :}
    | retornar:r EXP:e ptoComa {: RESULT = new NodoAST(TipoNodo.retornar, r, rleft, rright , parser.sourceFile, e); :}
    | detener:d ptoComa {: RESULT = new NodoAST(TipoNodo.detener, d, dleft, dright , parser.sourceFile); :}
    | error:e ptoComa {: RESULT = new NodoAST(TipoNodo.errorSintactico, "ERR", eleft, eright , parser.sourceFile);:}
;

DECLARACION ::= dimV:d id:i ptoComa {:
        NodoAST nodoID = new NodoAST(TipoNodo.identificador, i, ileft, iright , parser.sourceFile);
        RESULT = new NodoAST(TipoNodo.declaracion, "DIM", dleft, dright , parser.sourceFile, nodoID);        
        
    :}
    | dimV:d id:i llaveA EXP:e llaveC ptoComa {:
        NodoAST nodoID = new NodoAST(TipoNodo.identificador, i, ileft, iright , parser.sourceFile);
        RESULT = new NodoAST(TipoNodo.declaracion, "DIM", dleft, dright , parser.sourceFile, nodoID, e);        
        
    :}
    | dimV:d ASIGNACION:a ptoComa{:
        RESULT = new NodoAST(TipoNodo.declaracion, "DIM", dleft, dright , parser.sourceFile, a);        
    :}
;

ASIGNACION ::= id:i dosPtos EXP:e  {:
        NodoAST nodoID = new NodoAST(TipoNodo.identificador, i, ileft, iright , parser.sourceFile);
        RESULT = new NodoAST(TipoNodo.asignacion, ":", ileft, iright,parser.sourceFile, nodoID, e);
    :}
;

LLAMADA ::= id:i parenA parenC  {:
        RESULT = new NodoAST(TipoNodo.llamadaFuncion, i, ileft, iright, parser.sourceFile);  
    :}
    | id:i parenA EXPRS:es parenC  {:
        NodoAST nodoArgs = new NodoAST(TipoNodo.args, "ARGS", esleft, esright, parser.sourceFile); 
        nodoArgs.hijos.addAll(es);
        NodoAST nodo = new NodoAST(TipoNodo.llamadaFuncion, i, ileft, iright, parser.sourceFile, nodoArgs);          
        RESULT = nodo;
    :}
    | id:i punto id:f parenA parenC  {:
        NodoAST nodoID = new NodoAST(TipoNodo.identificador, i, ileft, iright , parser.sourceFile);
        RESULT = new NodoAST(TipoNodo.llamadaFuncion, f, fleft, fright, parser.sourceFile, nodoID);  
    :}
    | id:i punto id:f parenA EXPRS:es parenC  {:
        NodoAST nodoID = new NodoAST(TipoNodo.identificador, i, ileft, iright , parser.sourceFile);
        NodoAST nodoArgs = new NodoAST(TipoNodo.args, "ARGS", esleft, esright, parser.sourceFile); 
        nodoArgs.hijos.addAll(es);
        RESULT = new NodoAST(TipoNodo.llamadaFuncion, f, fleft, fright, parser.sourceFile, nodoID, nodoArgs);                  
    :}
;

IF ::= si:s parenA EXP:e parenC BLOQUE:b1 {:
        RESULT = new NodoAST(TipoNodo.si, "SI", sleft, sright, parser.sourceFile, e, b1);  
    :}
    | si:s parenA EXP:e parenC BLOQUE:b1 sino BLOQUE:b2{:
        NodoAST nodoIF  = new NodoAST(TipoNodo.si, "SI", sleft, sright, parser.sourceFile, e, b1);  
        nodoIF.agregarHijo(b2);
        RESULT = nodoIF;
    :}
;



//------------------------------------SELECCION

SELECT ::= select:s parenA EXP:e parenC llaveA CASOS:casos llaveC {:
        NodoAST nodoSelect = new NodoAST(TipoNodo.selecciona, "SELECCIONA", sleft, sright, parser.sourceFile, e);    
        nodoSelect.hijos.addAll(casos);
        RESULT = nodoSelect;
    :}
;

CASOS ::= CASOS:lista CASO:c {:    
        lista.add(c);
        RESULT = lista;
    :}
    | CASO:c{:
        ArrayList<NodoAST> casos = new ArrayList();
        casos.add(c);
        RESULT = casos;
    :}
;

CASO ::= caso EXP:e dosPtos SENTENCIAS:s{:
        RESULT= new NodoAST(TipoNodo.caso, "CASO", eleft, eright, parser.sourceFile, e, s);        
    :} 
    | defecto:d dosPtos SENTENCIAS:s{:
        RESULT = new NodoAST(TipoNodo.caso, "DEFECTO", dleft, dright, parser.sourceFile, s);    
    :}
    | caso EXP:e dosPtos BLOQUE:s{:
        RESULT= new NodoAST(TipoNodo.caso, "CASO", eleft, eright, parser.sourceFile, e, s);        
    :} 
    | defecto:d dosPtos BLOQUE:s{:
        RESULT = new NodoAST(TipoNodo.caso, "DEFECTO", dleft, dright, parser.sourceFile, s);    
    :}
;

FOR ::= para:p parenA ASIGNACION:asig ptoComa EXP:cond ptoComa MONO_OPERADOR:op parenC BLOQUE:b{:
        RESULT = new NodoAST(TipoNodo.para, "PARA", pleft, pright, parser.sourceFile, new NodoAST[]{asig, cond, op, b});    
    :}
;

WHILE ::= mientras:m parenA EXP:cond parenC BLOQUE:b{:
        RESULT = new NodoAST(TipoNodo.mientras, "MIENTRAS", mleft, mright, parser.sourceFile, cond, b);    
    :}
;

MONO_OPERADOR ::= inc:o {:
        RESULT = new NodoAST(TipoNodo.inc, String.valueOf(o), oleft, oright, parser.sourceFile);    
    :}
    | dec:o {:
        RESULT = new NodoAST(TipoNodo.dec, String.valueOf(o), oleft, oright, parser.sourceFile);    
    :}
;
EXP ::= EXP:e1 mas:op EXP:e2{:
        RESULT = new NodoAST(TipoNodo.mas, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | EXP:e1 menos:op EXP:e2{:
        RESULT = new NodoAST(TipoNodo.menos, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | EXP:e1 por:op EXP:e2{:
        RESULT = new NodoAST(TipoNodo.por, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | EXP:e1 entre:op EXP:e2{:
        RESULT = new NodoAST(TipoNodo.entre, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | EXP:e1 potencia:op EXP:e2{:
        RESULT = new NodoAST(TipoNodo.potencia, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | menos:op EXP:e{:
        RESULT = new NodoAST(TipoNodo.negativo, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e);
    :} %prec SIGNO
    | EXP:e1 mayor:op EXP:e2{:
        RESULT = new NodoAST(TipoNodo.mayor, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | EXP:e1 menor:op EXP:e2{:
        RESULT = new NodoAST(TipoNodo.menor, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | EXP:e1 mayorI:op  EXP:e2{:
        RESULT = new NodoAST(TipoNodo.mayorI, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | EXP:e1 menorI:op  EXP:e2{:
        RESULT = new NodoAST(TipoNodo.menorI, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | EXP:e1 igual:op  EXP:e2{:
        RESULT = new NodoAST(TipoNodo.igual, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | EXP:e1 diferente:op  EXP:e2{:
        RESULT = new NodoAST(TipoNodo.diferente, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | EXP:e1 and:op EXP:e2{:
        RESULT = new NodoAST(TipoNodo.and, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | EXP:e1 or:op EXP:e2{:
        RESULT = new NodoAST(TipoNodo.or, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | not:op EXP:e{:
        RESULT = new NodoAST(TipoNodo.not, String.valueOf(op), opleft, opright, parser.sourceFile, e);
    :}
    | parenA EXP:e parenC{:
        RESULT = e;
    :}
    | enteroLiteral:e{:
        RESULT = new NodoAST(TipoNodo.enteroLit, e, eleft, eright, parser.sourceFile);         
    :}
    | dobleLiteral:d{:
        RESULT = new NodoAST(TipoNodo.dobleLit, d, dleft, dright, parser.sourceFile);         
    :}
    | booleanoLiteral:b{:
        RESULT = new NodoAST(TipoNodo.booleanoLit, b, bleft, bright, parser.sourceFile);         
    :}
    | dateLiteral:d{:
        DateTimeFormatter f = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        LocalDate date = LocalDate.parse("01/01/1970", f);
        
        String dateInString = d.toString();        
        try {
             date = LocalDate.parse(dateInString, f);           
        } catch (Exception e) {
            errores.add(new ErrorCode(TipoError.lexico, dleft+1, dright+1, d.toString(), "Formato de fecha incorrecto", parser.sourceFile));
            //e.printStackTrace();
        }
        RESULT = new NodoAST(TipoNodo.fechaLit, date, dleft, dright, parser.sourceFile);         
    :}
    | dateTimeLiteral:d{:
        DateTimeFormatter f = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
        LocalDateTime date = LocalDateTime.parse("01/01/1970 00:00:00", f);
        
        String dateInString = d.toString();        
        try {
             date = LocalDateTime.parse(dateInString, f);           
        } catch (Exception e) {
            errores.add(new ErrorCode(TipoError.lexico, dleft+1, dright+1, d.toString(), "Formato de fecha incorrecto", parser.sourceFile));            
        }
        RESULT = new NodoAST(TipoNodo.fechaLit, date, dleft, dright, parser.sourceFile);         
    :}
    | cadenaLiteral:c{:
        RESULT = new NodoAST(TipoNodo.cadenaLit, c, cleft, cright - 1, parser.sourceFile); 
        //el -1 porque no se incluye la comilla inicial en el token    
    :}
    | id:i{:
        RESULT = new NodoAST(TipoNodo.identificador, i, ileft, iright, parser.sourceFile);     
    :}
    | ARREGLO_LITERAL:a{:
        RESULT = a;     
    :}
    | LLAMADA:l{:
        RESULT = l;     
    :}
    | id:i llaveA EXP:e llaveC{:
        RESULT = new NodoAST(TipoNodo.identificador, i, ileft, iright, parser.sourceFile, e);     
    :}
    | id:i1 punto id:i2{:
        NodoAST nodoID2 = new NodoAST(TipoNodo.identificador, i2, i2left, i2right, parser.sourceFile );     
        RESULT = new NodoAST(TipoNodo.identificador, i1, i1left, i1right, parser.sourceFile, nodoID2);             
    :}
;


ARREGLO_LITERAL ::= llaveA:l EXPRS:es llaveC{:
        NodoAST arreglo = new NodoAST(TipoNodo.arregloLiteral, "{}", lleft, lright, parser.sourceFile);     
        arreglo.hijos.addAll(es);
        RESULT = arreglo;
    :}
;

EXPRS ::= EXPRS:es coma EXP:e {:
        es.add(e);
        RESULT = es;
    :}
    | EXP:e {:
        ArrayList<NodoAST> exprs = new ArrayList();
        exprs.add(e);
        RESULT = exprs;
    :}
;