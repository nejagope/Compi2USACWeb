package compilacion;
import java_cup.runtime.*;
import java.util.ArrayList;

parser code
{:
    public AST ast;
    //la lista global de errores del analizador
    public ArrayList <ErrorCode> errores;

    //tabla símbolos
    public TablaSimbolos tablaSimbolos;
    
    //nombre del archivo fuente
    public String sourceFile;


    public ParserCHTML(java_cup.runtime.Scanner s, String archivoFuente,  ArrayList <ErrorCode> errores, TablaSimbolos tablaSimbolos){
        super(s);
        this.sourceFile = archivoFuente;
        this.errores = errores;
        this.tablaSimbolos = tablaSimbolos;
    }
    
    
    public AST getAST(){
        return ast;
    }
    

    public ArrayList <ErrorCode> getErrores(){
        return errores;
    }

    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){

        errores.add(new ErrorCode(TipoError.sintactico, s.left+1, s.right+1, String.valueOf(s.value), "Sintaxis erronea", sourceFile));
        //System.err.println("Error de sintaxis en (" + (s.left+1) + ","+(s.right+1)+ "): " +s.value);
    }
   
    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        /* 
            Posibles causas:
                1- se encontró un error y no hay una posible reducción posterior al lugar donde se halló

        */
       errores.add(new ErrorCode(TipoError.sintactico, s.left+1, s.right+1, String.valueOf(s.value), "Sintaxis erronea", sourceFile));
       //System.err.println("Error IRRECUPERABLE de sintaxis en (" + (s.left+1) + ", " +(s.right+1)+ "): " +s.value);
    }

    public void agregarError(String cadena, int linea, int columna, String mensaje){
        errores.add(new ErrorCode(TipoError.sintactico, linea, columna, cadena, mensaje, sourceFile));
    }

    public boolean etiquetasCoinciden(NodoAST nodo1, NodoAST nodo2){
        if (nodo1 == null || nodo2 == null)
            return false;
        return (nodo2.tipo.toString().startsWith(nodo1.tipo.toString()));            
    }
    
    public boolean esEtiquetaInicio(NodoAST nodo){
        if (nodo == null)
            return false;
        return (nodo.tipo.toString().endsWith("F"));         
    }
    
    public boolean esEtiquetaFin(NodoAST nodo){ 
        if (nodo == null)
            return false;
        return !esEtiquetaInicio(nodo);
    }

    public void verificarHijosApropiados(NodoAST nodo){
        ArrayList<TipoNodo> hijosAcep = new ArrayList<>();
        switch (nodo.tipo){
            case chtml:
                hijosAcep.add(TipoNodo.encabezado);
                hijosAcep.add(TipoNodo.cuerpo);
                break;
            case encabezado:
                hijosAcep.add(TipoNodo.titulo);
                hijosAcep.add(TipoNodo.cjs);                
                hijosAcep.add(TipoNodo.ccss);                
                break;
            case ccss:                
            case cjs:
            case titulo:
            case texto:                
            case areaTexto:
            case cajaTexto:
            case imagen:
            case boton:
            case enlace:
            case opcion:
            case spinner:
                hijosAcep.add(TipoNodo.textoPlano);
                break;                        
            case cajaOpciones:
                hijosAcep.add(TipoNodo.opcion);
                break;
            case tabla:
                hijosAcep.add(TipoNodo.fila);
                break;
            case fila:
                hijosAcep.add(TipoNodo.celdaEnc);
                hijosAcep.add(TipoNodo.celda);
                break;
                
            case cuerpo:
            case panel:
                hijosAcep.add(TipoNodo.tabla);
                hijosAcep.add(TipoNodo.areaTexto);
                hijosAcep.add(TipoNodo.cajaTexto);
                hijosAcep.add(TipoNodo.texto);
                hijosAcep.add(TipoNodo.imagen);
                hijosAcep.add(TipoNodo.boton);
                hijosAcep.add(TipoNodo.enlace);
                hijosAcep.add(TipoNodo.spinner);
                hijosAcep.add(TipoNodo.cajaOpciones);
                hijosAcep.add(TipoNodo.panel);
                hijosAcep.add(TipoNodo.salto);
                break;                                      
                        
            case celda:
                hijosAcep.add(TipoNodo.textoPlano);
                hijosAcep.add(TipoNodo.boton);
                hijosAcep.add(TipoNodo.imagen);
                hijosAcep.add(TipoNodo.salto);
                break;
        }
        for(NodoAST hijo: nodo.hijos){
            if (hijo.tipo == TipoNodo.atribs)
                continue;
            if (!hijosAcep.contains(hijo.tipo)){
                agregarError(hijo.tipo.toString(), hijo.linea -1, hijo.columna-1, "El componente " + nodo.tipo.toString() + " no puede contener a la etiqueta " + hijo.tipo.toString());
                    hijo.omitir = true;
            }
        }
    }

    public void verificarAtributosApropiados(NodoAST nodo){
        ArrayList<TipoNodo> tiposAcep = new ArrayList<>();
        ArrayList<TipoNodo> tiposGenerales = new ArrayList<>();
        tiposGenerales.add(TipoNodo.id);
        tiposGenerales.add(TipoNodo.grupo);
        tiposGenerales.add(TipoNodo.alto);
        tiposGenerales.add(TipoNodo.ancho);
        tiposGenerales.add(TipoNodo.alineado);
        
        switch (nodo.tipo){
            case chtml:
            case encabezado:
                break;
            case ccss:                
            case cjs:
                tiposAcep.add(TipoNodo.ruta);                
                break;
            case enlace:
                tiposAcep.addAll(tiposGenerales);
                tiposAcep.add(TipoNodo.ruta);                
                break;
            case cuerpo:
                tiposAcep.add(TipoNodo.fondo);
                tiposAcep.addAll(tiposGenerales);
                break;
            case imagen:
            case boton:
                tiposAcep.addAll(tiposGenerales);
                tiposAcep.add(TipoNodo.ruta);
                tiposAcep.add(TipoNodo.click);
                break;            
            case cajaOpciones:
                tiposAcep.add(TipoNodo.click);
                tiposAcep.addAll(tiposGenerales);
                break;
            case opcion:
                tiposAcep.add(TipoNodo.valor);
                tiposAcep.addAll(tiposGenerales);
                break;
            case panel:
            case texto:
            case tabla:
            case fila:
            case celda:
            case celdaEnc:
            case areaTexto:
            case cajaTexto:
            case spinner:
                tiposAcep.addAll(tiposGenerales);
                break;
                
        }
        NodoAST nodoAtribs = nodo.getHijo(0);
        if (nodoAtribs != null){
            for(NodoAST atrib: nodoAtribs.hijos){
                if (!tiposAcep.contains(atrib.tipo)){
                    agregarError(atrib.tipo.toString(), atrib.linea -1, atrib.columna-1, "No se puede aplicar el atributo " + atrib.lexema + " a la etiqueta " + nodo.tipo.toString());
                    atrib.omitir = true;
                }
            }
        }        
    }

    public void crearYAgregarSimbolos(NodoAST nodo){
        Simbolo s = new Simbolo(nodo);
        if (s.agregarATabla)
            tablaSimbolos.agregarComponente(s);
        for(NodoAST hijo: nodo.hijos){
            crearYAgregarSimbolos(hijo);
        }
    }
:}

action code
{:

:}

terminal LT, GT, EQ, ptoComa;
terminal chtml, encabezado, cjs, ccss, cuerpo, titulo, panel, texto, imagen, boton, enlace, tabla;
terminal fila, celdaEnc, celda, areaTexto, cajaTexto, cajaOpciones, opcion, spinner, salto;
terminal chtmlF, encabezadoF, cjsF, ccssF, cuerpoF, tituloF, panelF, textoF, imagenF, botonF, enlaceF, tablaF;
terminal filaF, celdaEncF, celdaF, areaTextoF, cajaTextoF, cajaOpcionesF, opcionF, spinnerF;

terminal String ruta, fondo, click, id, grupo, alto, ancho, alineado, valor;

terminal cadenaValor;

terminal String elementoDesconocido, textoPlano;
terminal errorLex;

non terminal S;
non terminal NodoAST CHTML, ATRIB, NODO_CHTML, ATRIBS, TAG_INI, TAG_FIN, TAG_NAME, TAG_FIN_NAME, ELEMENTO; 
non terminal ArrayList<NodoAST> NODOS_CHTML;

start with S;

//**********************************************************************************************************
S ::= NODO_CHTML:n{:
    parser.ast = new AST();
    parser.ast.raiz = n;  
    crearYAgregarSimbolos(n);
:};

NODOS_CHTML ::= NODOS_CHTML:es NODO_CHTML:e{:
        ArrayList<NodoAST> nodos = es;
        nodos.add(e);
        RESULT = nodos;
    :}
    | NODO_CHTML:e{:
        ArrayList<NodoAST> nodos = new ArrayList<NodoAST>();
        nodos.add(e);
        RESULT = nodos;
    :}
;

NODO_CHTML ::= TAG_INI:ta NODOS_CHTML:ns TAG_FIN:tc {:
        ta.hijos.addAll(ns);
        RESULT = ta;
        if (!etiquetasCoinciden(ta, tc))
            agregarError(tc.lexema, tcleft+1, tcright+1, "Las etiquetas no coinciden. Se esperaba el cierre de " + ta.lexema);        
   
        if (ta.tipo == TipoNodo.chtml){
            NodoAST enc = ta.getHijo(0);
            if (enc != null){
                if (enc.tipo == TipoNodo.encabezado){
                    for (NodoAST nodoEnc : enc.hijos){
                        if (nodoEnc.tipo == TipoNodo.cjs || nodoEnc.tipo == TipoNodo.ccss){
                            NodoAST atribs = nodoEnc.getHijo(0);
                            String nombreArchivo = "";
                            if (atribs != null){
                                if (atribs.tipo == TipoNodo.atribs){
                                    NodoAST elemento = atribs.getHijo(0);
                                    if (elemento != null){
                                        if (elemento.lexema.toLowerCase().equals("ruta")){
                                            nombreArchivo = elemento.getHijo(0).lexema;                                                                                        
                                        }
                                    }
                                }else if (atribs.tipo == TipoNodo.textoPlano){
                                    nombreArchivo = atribs.lexema;
                                }                                                                        
                            }
                            if (nombreArchivo.length() > 0){
                                AnalisisSintactico sintactico = new AnalisisSintactico(nombreArchivo, errores, tablaSimbolos);
                                //se analiza el archivo fuente y se produce un Arbol de sintaxis abstracta (ast)
                                if (sintactico.generarAST()){
                                    nodoEnc.agregarHijo(sintactico.getAST().raiz);                                                      
                                }
                            }
                        }else{
                            agregarError(nodoEnc.lexema, nodoEnc.linea-1, nodoEnc.columna-1, "Se esperaba titulo, ccss o cjs");
                        }
                    }
                }else{
                    agregarError(enc.lexema, enc.linea-1, enc.columna-1, "Se esperaba el encabezado del archivo");
                }
            }
        }

        verificarHijosApropiados(ta);
    :}
    | TAG_INI:ta TAG_FIN:tc {:
        RESULT = ta;
        if (!etiquetasCoinciden(ta, tc))
            agregarError(tc.lexema, tcleft+1, tcright+1, "Las etiquetas no coinciden. Se esperaba el cierre de" + ta.lexema);
    :}    
    | textoPlano:t {: 
        RESULT = new NodoAST(TipoNodo.textoPlano, t, tleft, tright, parser.sourceFile); 
    :}
    | salto:n  {: 
        RESULT = new NodoAST(TipoNodo.salto, n, nleft, nright, parser.sourceFile); 
    :}    
;

TAG_INI ::= LT TAG_NAME:tn ATRIBS:atribs GT {:        
        tn.agregarHijo(atribs);
        RESULT = tn;
        verificarAtributosApropiados(tn);
    :}
    | LT TAG_NAME:tn GT {:
        RESULT = tn;
    :}
    | error GT:e {:        
        NodoAST nodoErr = new NodoAST(TipoNodo.errorSintactico, "Error antes de <", eleft, eright, parser.sourceFile);
        nodoErr.omitir = true;
        RESULT = nodoErr;
    :}    
;


TAG_FIN ::= LT TAG_FIN_NAME:tn GT {:
        RESULT = tn;
    :}
    | LT:e TAG_FIN_NAME:tn {:
        RESULT = tn;
        agregarError("", eleft+1, eright+1, "Se esperaba >");
    :}
    | TAG_FIN_NAME:tn GT{:
        RESULT = tn;
        agregarError("", tnleft+1, tnright+1, "Se esperaba >");
    :}
;

ATRIBS ::= ATRIBS:atribs ATRIB:atrib {:
        NodoAST nodoAtribs = atribs;
        nodoAtribs.agregarHijo(atrib);
        RESULT = nodoAtribs;
    :}
    | ATRIB:atrib {:
        RESULT = new NodoAST(TipoNodo.atribs, "ATRIBS", atribleft, atribright, parser.sourceFile, atrib);
    :}
;

ATRIB ::= ELEMENTO:e EQ cadenaValor:c ptoComa {:        
        NodoAST nodoValor = new NodoAST(TipoNodo.cadenaValor, c, cleft, cright, parser.sourceFile);
        e.agregarHijo(nodoValor);
        RESULT = e;//new NodoAST(TipoNodo.elemento, e, eleft, eright, parser.sourceFile, nodoValor);        
    :}
    | error ptoComa:p {:        
        NodoAST nodoErr = new NodoAST(TipoNodo.errorSintactico, "Error antes de ;", pleft, pright, parser.sourceFile);
        nodoErr.omitir = true;
        RESULT = nodoErr;
    :}
;

TAG_NAME ::= 
      chtml:n  {: RESULT = new NodoAST(TipoNodo.chtml, n, nleft, nright, parser.sourceFile); :}
    | encabezado:n  {: RESULT = new NodoAST(TipoNodo.encabezado, n, nleft, nright, parser.sourceFile); :}    
    | cjs:n  {: RESULT = new NodoAST(TipoNodo.cjs, n, nleft, nright, parser.sourceFile); :}
    | ccss:n {: RESULT = new NodoAST(TipoNodo.ccss, n, nleft, nright, parser.sourceFile); :}
    | cuerpo:n  {: RESULT = new NodoAST(TipoNodo.cuerpo, n, nleft, nright, parser.sourceFile); :}
    | titulo:n  {: RESULT = new NodoAST(TipoNodo.titulo, n, nleft, nright, parser.sourceFile); :}
    | panel:n  {: RESULT = new NodoAST(TipoNodo.panel, n, nleft, nright, parser.sourceFile); :}
    | texto:n  {: RESULT = new NodoAST(TipoNodo.texto, n, nleft, nright, parser.sourceFile); :}
    | imagen:n  {: RESULT = new NodoAST(TipoNodo.imagen, n, nleft, nright, parser.sourceFile); :}
    | boton:n  {: RESULT = new NodoAST(TipoNodo.boton, n, nleft, nright, parser.sourceFile); :}
    | enlace:n  {: RESULT = new NodoAST(TipoNodo.enlace, n, nleft, nright, parser.sourceFile); :}
    | tabla:n  {: RESULT = new NodoAST(TipoNodo.tabla, n, nleft, nright, parser.sourceFile); :}
    | fila:n  {: RESULT = new NodoAST(TipoNodo.fila, n, nleft, nright, parser.sourceFile); :}
    | celdaEnc:n  {: RESULT = new NodoAST(TipoNodo.celdaEnc, n, nleft, nright, parser.sourceFile); :}
    | celda:n  {: RESULT = new NodoAST(TipoNodo.celda, n, nleft, nright, parser.sourceFile); :}
    | areaTexto:n  {: RESULT = new NodoAST(TipoNodo.areaTexto, n, nleft, nright, parser.sourceFile); :}
    | cajaTexto:n  {: RESULT = new NodoAST(TipoNodo.cajaTexto, n, nleft, nright, parser.sourceFile); :}
    | cajaOpciones:n  {: RESULT = new NodoAST(TipoNodo.cajaOpciones, n, nleft, nright, parser.sourceFile); :}
    | opcion:n  {: RESULT = new NodoAST(TipoNodo.opcion, n, nleft, nright, parser.sourceFile); :}
    | spinner:n  {: RESULT = new NodoAST(TipoNodo.spinner, n, nleft, nright, parser.sourceFile); :}
;

TAG_FIN_NAME ::=
      chtmlF:n  {: RESULT = new NodoAST(TipoNodo.chtmlF, n, nleft, nright, parser.sourceFile); :}
    | encabezadoF:n  {: RESULT = new NodoAST(TipoNodo.encabezadoF, n, nleft, nright, parser.sourceFile); :}
    | cjsF:n  {: RESULT = new NodoAST(TipoNodo.cjsF, n, nleft, nright, parser.sourceFile); :}
    | ccssF:n {: RESULT = new NodoAST(TipoNodo.ccssF, n, nleft, nright, parser.sourceFile); :}
    | cuerpoF:n  {: RESULT = new NodoAST(TipoNodo.cuerpoF, n, nleft, nright, parser.sourceFile); :}
    | tituloF:n  {: RESULT = new NodoAST(TipoNodo.tituloF, n, nleft, nright, parser.sourceFile); :}
    | panelF:n  {: RESULT = new NodoAST(TipoNodo.panelF, n, nleft, nright, parser.sourceFile); :}
    | textoF:n  {: RESULT = new NodoAST(TipoNodo.textoF, n, nleft, nright, parser.sourceFile); :}
    | imagenF:n  {: RESULT = new NodoAST(TipoNodo.imagenF, n, nleft, nright, parser.sourceFile); :}
    | botonF:n  {: RESULT = new NodoAST(TipoNodo.botonF, n, nleft, nright, parser.sourceFile); :}
    | enlaceF:n  {: RESULT = new NodoAST(TipoNodo.enlaceF, n, nleft, nright, parser.sourceFile); :}
    | tablaF:n  {: RESULT = new NodoAST(TipoNodo.tablaF, n, nleft, nright, parser.sourceFile); :}
    | filaF:n  {: RESULT = new NodoAST(TipoNodo.filaF, n, nleft, nright, parser.sourceFile); :}
    | celdaEncF:n  {: RESULT = new NodoAST(TipoNodo.celdaEncF, n, nleft, nright, parser.sourceFile); :}
    | celdaF:n  {: RESULT = new NodoAST(TipoNodo.celdaF, n, nleft, nright, parser.sourceFile); :}
    | areaTextoF:n  {: RESULT = new NodoAST(TipoNodo.areaTextoF, n, nleft, nright, parser.sourceFile); :}
    | cajaTextoF:n  {: RESULT = new NodoAST(TipoNodo.cajaTextoF, n, nleft, nright, parser.sourceFile); :}
    | cajaOpcionesF:n  {: RESULT = new NodoAST(TipoNodo.cajaOpcionesF, n, nleft, nright, parser.sourceFile); :}
    | opcionF:n  {: RESULT = new NodoAST(TipoNodo.opcionF, n, nleft, nright, parser.sourceFile); :}
    | spinnerF:n  {: RESULT = new NodoAST(TipoNodo.spinnerF, n, nleft, nright, parser.sourceFile); :}    
;

ELEMENTO ::=
      ruta:n {: RESULT = new NodoAST(TipoNodo.ruta, n, nleft, nright, parser.sourceFile); :}
    | fondo:n {: RESULT = new NodoAST(TipoNodo.fondo, n, nleft, nright, parser.sourceFile); :}
    | click:n {: RESULT = new NodoAST(TipoNodo.click, n, nleft, nright, parser.sourceFile); :}
    | id:n {: RESULT = new NodoAST(TipoNodo.id, n, nleft, nright, parser.sourceFile); :}
    | grupo:n {: RESULT = new NodoAST(TipoNodo.grupo, n, nleft, nright, parser.sourceFile); :}
    | alto:n {: RESULT = new NodoAST(TipoNodo.alto, n, nleft, nright, parser.sourceFile); :}
    | ancho:n {: RESULT = new NodoAST(TipoNodo.ancho, n, nleft, nright, parser.sourceFile); :}
    | alineado:n {: RESULT = new NodoAST(TipoNodo.alineado, n, nleft, nright, parser.sourceFile); :}
    | valor:n {: RESULT = new NodoAST(TipoNodo.valor, n, nleft, nright, parser.sourceFile); :}    
;
