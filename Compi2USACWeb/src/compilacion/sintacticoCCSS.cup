package compilacion;
import java_cup.runtime.*;
import java.util.ArrayList;

parser code
{:
    public AST ast;
    //la lista global de errores del analizador
    public ArrayList <ErrorCode> errores;

    //tabla símbolos
    public TablaSimbolos tablaSimbolos;
    

    //nombre del archivo fuente
    public String sourceFile;


    public ParserCCSS(java_cup.runtime.Scanner s, String archivoFuente,  ArrayList <ErrorCode> errores, TablaSimbolos tablaSimbolos){
        super(s);
        this.sourceFile = archivoFuente;
        this.errores = errores;
        this.tablaSimbolos = tablaSimbolos;
    }
    
    
    public AST getAST(){
        return ast;
    }
    

    public ArrayList <ErrorCode> getErrores(){
        return errores;
    }

    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){

        errores.add(new ErrorCode(TipoError.sintactico, s.left+1, s.right+1, String.valueOf(s.value), "Sintaxis erronea", sourceFile));
        //System.err.println("Error de sintaxis en (" + (s.left+1) + ","+(s.right+1)+ "): " +s.value);
    }
   
    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        /* 
            Posibles causas:
                1- se encontró un error y no hay una posible reducción posterior al lugar donde se halló

        */
       errores.add(new ErrorCode(TipoError.sintactico, s.left+1, s.right+1, String.valueOf(s.value), "Sintaxis erronea", sourceFile));
       //System.err.println("Error IRRECUPERABLE de sintaxis en (" + (s.left+1) + ", " +(s.right+1)+ "): " +s.value);
    }

    public void agregarError(String cadena, int linea, int columna, String mensaje){
        errores.add(new ErrorCode(TipoError.sintactico, linea, columna, cadena, mensaje, sourceFile));
    }
:}

action code
{:

:}

terminal String asignacion, coma, ptoComa, por, entre, mas, menos, parenA, parenC, corcheteA, corcheteC;
terminal String alineado, centrado, justificado, izquierda, derecha;
terminal String texto, formato, negrilla, cursiva, mayuscula, minuscula, capital, fuente, tamTex, fondoElemento;
terminal String autoredimension, area, horizontal, vertical;
terminal String borde, visible, opaque, colorTex, grupo, id;
terminal booleanoLiteral, dobleLiteral, enteroLiteral, cadenaLiteral, cadenaLiteral2, identificador, errorLex;

terminal SIGNO;

non terminal S;
non terminal NodoAST DEFINICION, REGLA, ESTILO, CONJUNTO, NOMBRE_ESTILO, VALOR, EXP; 
non terminal ArrayList<NodoAST> DEFINICIONES, REGLAS, ESTILOS, VALORES, SET_VALORES;

precedence left mas, menos;
precedence left por, entre;
precedence left SIGNO;


start with S;

//**********************************************************************************************************
S ::= DEFINICIONES:defs{:
        parser.ast = new AST();
        NodoAST nodo = new NodoAST(TipoNodo.definicionesCCSS, "DEFS_CCSS", defsleft, defsright, parser.sourceFile);
        nodo.hijos.addAll(defs);
        parser.ast.raiz = nodo;
    :}
;

DEFINICIONES ::= DEFINICIONES:defs DEFINICION:def {:
        defs.add(def);
        RESULT = defs;
    :}
    | DEFINICION:def{:
        ArrayList<NodoAST> defs = new ArrayList();
        defs.add(def);
        RESULT = defs;
    :}
;

DEFINICION ::= identificador:i corcheteA REGLAS:r corcheteC {:
        NodoAST nodoDefinicion = new NodoAST(TipoNodo.definicion, i, ileft, iright, parser.sourceFile);
        nodoDefinicion.hijos.addAll(r);
        RESULT = nodoDefinicion;
    :}
;

REGLAS ::= REGLAS:lista REGLA:r{:
        lista.add(r);
        RESULT = lista;
    :}
    | REGLA:r{:
        ArrayList<NodoAST> reglas = new ArrayList();
        reglas.add(r);
        RESULT = reglas;
    :}
;

REGLA ::= CONJUNTO:c ESTILOS:e {:
        NodoAST nodoRegla = new NodoAST(TipoNodo.regla, "REGLA", cleft, cright, parser.sourceFile, c);
        nodoRegla.hijos.addAll(e);
        RESULT = nodoRegla;
    :}
;

ESTILOS ::= ESTILOS:lista ESTILO:e{:
        lista.add(e);
        RESULT = lista;
    :}
    | ESTILO:e{:
        ArrayList<NodoAST> estilos = new ArrayList();
        estilos.add(e);
        RESULT = estilos;
    :}
;

CONJUNTO ::= grupo:g parenA identificador:i parenC ptoComa{:
        NodoAST nodoGrupo = new NodoAST(TipoNodo.grupo, g, gleft, gright, parser.sourceFile);
        NodoAST nodoID2 = new NodoAST(TipoNodo.identificador, i, ileft, iright, parser.sourceFile);
        RESULT = new NodoAST(TipoNodo.conjunto, "CONJUNTO", gleft, gright, parser.sourceFile, nodoGrupo, nodoID2); 
    :}
    | id:iden parenA identificador:i parenC ptoComa{:
        NodoAST nodoID = new NodoAST(TipoNodo.id, iden, idenleft, idenright, parser.sourceFile);
        NodoAST nodoID2 = new NodoAST(TipoNodo.identificador, i, ileft, iright, parser.sourceFile);
        RESULT = new NodoAST(TipoNodo.conjunto, "CONJUNTO", idenleft, idenright, parser.sourceFile, nodoID, nodoID2); 
    :}
;

ESTILO ::=  NOMBRE_ESTILO:e asignacion VALORES:vs ptoComa {:
        e.hijos.addAll(vs); 
        RESULT = e;
    :}
    | NOMBRE_ESTILO:e asignacion corcheteA VALORES:vs corcheteC ptoComa {:
        e.hijos.addAll(vs); 
        RESULT = e;
    :}
;

NOMBRE_ESTILO ::= alineado:e {:RESULT = new NodoAST(TipoNodo.alineado, e, eleft, eright, parser.sourceFile); :}
    | texto:e {:RESULT = new NodoAST(TipoNodo.texto, e, eleft, eright, parser.sourceFile); :}
    | autoredimension:e {:RESULT = new NodoAST(TipoNodo.autoredimension, e, eleft, eright, parser.sourceFile); :}
    | borde:e {:RESULT = new NodoAST(TipoNodo.borde, e, eleft, eright, parser.sourceFile); :}
    | formato:e {:RESULT = new NodoAST(TipoNodo.formato, e, eleft, eright, parser.sourceFile); :}
    | fuente:e {:RESULT = new NodoAST(TipoNodo.fuente, e, eleft, eright, parser.sourceFile); :}
    | tamTex:e {:RESULT = new NodoAST(TipoNodo.tamTex, e, eleft, eright, parser.sourceFile); :}
    | fondoElemento:e {:RESULT = new NodoAST(TipoNodo.fondoElemento, e, eleft, eright, parser.sourceFile); :}
    | visible:e {:RESULT = new NodoAST(TipoNodo.visible, e, eleft, eright, parser.sourceFile); :}
    | opaque:e {:RESULT = new NodoAST(TipoNodo.opaque, e, eleft, eright, parser.sourceFile); :}
    | colorTex:e {:RESULT = new NodoAST(TipoNodo.colorTex, e, eleft, eright, parser.sourceFile); :}
;

VALORES ::= VALORES:vs coma VALOR:v{:
        vs.add(v);
        RESULT = vs;
    :}
    | VALOR:v {:
        ArrayList<NodoAST> valores = new ArrayList();
        valores.add(v);
        RESULT = valores;
    :}
;

VALOR ::= centrado:v {:RESULT = new NodoAST(TipoNodo.centrado, v, vleft, vright, parser.sourceFile); :}
    | justificado:v {:RESULT = new NodoAST(TipoNodo.justificado, v, vleft, vright, parser.sourceFile); :}
    | izquierda:v {:RESULT = new NodoAST(TipoNodo.izquierda, v, vleft, vright, parser.sourceFile); :}
    | derecha:v {:RESULT = new NodoAST(TipoNodo.derecha, v, vleft, vright, parser.sourceFile); :}
    | negrilla:v {:RESULT = new NodoAST(TipoNodo.negrilla, v, vleft, vright, parser.sourceFile); :}
    | cursiva:v {:RESULT = new NodoAST(TipoNodo.cursiva, v, vleft, vright, parser.sourceFile); :}
    | minuscula:v {:RESULT = new NodoAST(TipoNodo.minuscula, v, vleft, vright, parser.sourceFile); :}
    | mayuscula:v {:RESULT = new NodoAST(TipoNodo.mayuscula, v, vleft, vright, parser.sourceFile); :}
    | capital:v {:RESULT = new NodoAST(TipoNodo.capital, v, vleft, vright, parser.sourceFile); :}
    | area:v {:RESULT = new NodoAST(TipoNodo.area, v, vleft, vright, parser.sourceFile); :}
    | horizontal:v {:RESULT = new NodoAST(TipoNodo.horizontal, v, vleft, vright, parser.sourceFile); :}
    | vertical:v {:RESULT = new NodoAST(TipoNodo.vertical, v, vleft, vright, parser.sourceFile); :}
    | EXP:v {: RESULT = v; :}
 ; 

EXP ::= EXP:e1 mas:op EXP:e2{:
        RESULT = new NodoAST(TipoNodo.mas, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | EXP:e1 menos:op EXP:e2{:
        RESULT = new NodoAST(TipoNodo.menos, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | EXP:e1 por:op EXP:e2{:
        RESULT = new NodoAST(TipoNodo.por, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}
    | EXP:e1 entre:op EXP:e2{:
        RESULT = new NodoAST(TipoNodo.entre, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e1, (NodoAST)e2);
    :}    
    | menos:op EXP:e{:
        RESULT = new NodoAST(TipoNodo.negativo, String.valueOf(op), opleft, opright, parser.sourceFile, (NodoAST)e);
    :} %prec SIGNO    
    | parenA EXP:e parenC{:
        RESULT = e;
    :}
    | enteroLiteral:e{:
        RESULT = new NodoAST(TipoNodo.enteroLit, e, eleft, eright, parser.sourceFile);         
    :}
    | dobleLiteral:d{:
        RESULT = new NodoAST(TipoNodo.dobleLit, d, dleft, dright, parser.sourceFile);         
    :}
    | booleanoLiteral:b{:
        RESULT = new NodoAST(TipoNodo.booleanoLit, b, bleft, bright, parser.sourceFile);         
    :}
    | cadenaLiteral:c{:
        RESULT = new NodoAST(TipoNodo.cadenaLit, c, cleft, cright, parser.sourceFile);       
    :}    
    | cadenaLiteral2:v {:
        RESULT = new NodoAST(TipoNodo.cadenaLit2, v, vleft, vright, parser.sourceFile); 
    :}
;
